// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.NpcMessage
{
    // MSGTYPE_DECLARE(MSG_NPC_USE_SKILL),
    // npc->gamesvr 通知AINPC使用技能
    public sealed class NpcUseSkill : IProtocol
    {
        public const short MsgType = MessageType.MSG_NPC_USE_SKILL;
        public short GetMsgType { get { return MsgType; } }
        public uint SceneId;// 战场id
        public ulong NpcId;// 对象id
        public uint SkillId;// 技能id
        public short targetX;// 目标位置
        public short targetY;
        public ulong targetId;// 目标对象
        
        public static void Send(uint sceneId, ulong npcId, uint skillId, short targetX, short targetY, ulong targetId, object className)
        {
            var packet = new NpcUseSkill
            {
                SceneId = sceneId,
                NpcId = npcId,
                SkillId = skillId,
                targetX = targetX,
                targetY = targetY,
                targetId = targetId
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            SceneId = reader.ReadUInt32();
            NpcId = reader.ReadUInt64();
            SkillId = reader.ReadUInt32();
            targetX = reader.ReadInt16();
            targetY = reader.ReadInt16();
            targetId = reader.ReadUInt64();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(SceneId);
            writer.Write(NpcId);
            writer.Write(SkillId);
            writer.Write(targetX);
            writer.Write(targetY);
            writer.Write(targetId);
        }
    }
}
