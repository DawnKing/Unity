// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.NpcMessage
{
    // MSGTYPE_DECLARE(MSG_NPC_TANK_ENTER),
    // gamesvr->npc 通知坦克进入战场
    public sealed class NpcTankEnter : IProtocol
    {
        public const short MsgType = MessageType.MSG_NPC_TANK_ENTER;
        public short GetMsgType { get { return MsgType; } }
        public uint SceneId;// 场景id
        public ObjInfo tankData;// 场景数据
        public OBJECT_ATTR tankAttr;// 玩家的属性
        public uint RobotType;// 机器人等级类型
        public PropsInfo[] skillVec;// 技能信息
        
        public static void Send(uint sceneId, ObjInfo tankData, OBJECT_ATTR tankAttr, uint robotType, PropsInfo[] skillVec, object className)
        {
            var packet = new NpcTankEnter
            {
                SceneId = sceneId,
                tankData = tankData,
                tankAttr = tankAttr,
                RobotType = robotType,
                skillVec = skillVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            SceneId = reader.ReadUInt32();
            tankData = new ObjInfo();
            tankData.ReadFromStream(reader);
            tankAttr = new OBJECT_ATTR();
            tankAttr.ReadFromStream(reader);
            RobotType = reader.ReadUInt32();
            var length5 = reader.ReadUInt16();
            skillVec = new PropsInfo[length5];
            for (var i5 = 0; i5 < length5; i5++)
            {
                skillVec[i5] = new PropsInfo();
                skillVec[i5].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(SceneId);
            tankData.WriteToStream(writer);
            tankAttr.WriteToStream(writer);
            writer.Write(RobotType);
            ushort count5 = (ushort)(skillVec == null ? 0 : skillVec.Length);
            writer.Write(count5);
            for(var i5 = 0; i5 < count5; i5++)
            {
                skillVec[i5].WriteToStream(writer);
            }
        }
    }
}
