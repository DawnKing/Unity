// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.NpcMessage
{
    // MSGTYPE_DECLARE(MSG_NPC_CREATE_PROPS),
    // npc->gamesvr 通知创建场景道具
    public sealed class NpcCreateProps : IProtocol
    {
        public const short MsgType = MessageType.MSG_NPC_CREATE_PROPS;
        public short GetMsgType { get { return MsgType; } }
        public uint SceneId;// 场景id
        public uint propsId;// 道具id
        public short X;// 坐标
        public short Y;
        public byte Camp;// 阵营
        public ulong OwnerId;// 拥有者id
        
        public static void Send(uint sceneId, uint propsId, short x, short y, byte camp, ulong ownerId, object className)
        {
            var packet = new NpcCreateProps
            {
                SceneId = sceneId,
                propsId = propsId,
                X = x,
                Y = y,
                Camp = camp,
                OwnerId = ownerId
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            SceneId = reader.ReadUInt32();
            propsId = reader.ReadUInt32();
            X = reader.ReadInt16();
            Y = reader.ReadInt16();
            Camp = reader.ReadByte();
            OwnerId = reader.ReadUInt64();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(SceneId);
            writer.Write(propsId);
            writer.Write(X);
            writer.Write(Y);
            writer.Write(Camp);
            writer.Write(OwnerId);
        }
    }
}
