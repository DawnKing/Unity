// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.NpcMessage
{
    // MSGTYPE_DECLARE(MSG_NPC_OBJ_MOVE),
    // gamesvr->npc npc->gamesvr 通知对象移动
    public sealed class NpcObjMove : IProtocol
    {
        public const short MsgType = MessageType.MSG_NPC_OBJ_MOVE;
        public short GetMsgType { get { return MsgType; } }
        public uint SceneId;// 场景id
        public ulong objId;// 移动的对象id
        public short x;// 起始点
        public short y;// 起始点
        public short endx;// 终点
        public short endy;// 终点
        public int speed;// 移动速度
        public byte direction;// 朝向
        public byte moveType;// 移动类型  enum MOVE_TYPE
        
        public static void Send(uint sceneId, ulong objId, short x, short y, short endx, short endy, int speed, byte direction, byte moveType, object className)
        {
            var packet = new NpcObjMove
            {
                SceneId = sceneId,
                objId = objId,
                x = x,
                y = y,
                endx = endx,
                endy = endy,
                speed = speed,
                direction = direction,
                moveType = moveType
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            SceneId = reader.ReadUInt32();
            objId = reader.ReadUInt64();
            x = reader.ReadInt16();
            y = reader.ReadInt16();
            endx = reader.ReadInt16();
            endy = reader.ReadInt16();
            speed = reader.ReadInt32();
            direction = reader.ReadByte();
            moveType = reader.ReadByte();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(SceneId);
            writer.Write(objId);
            writer.Write(x);
            writer.Write(y);
            writer.Write(endx);
            writer.Write(endy);
            writer.Write(speed);
            writer.Write(direction);
            writer.Write(moveType);
        }
    }
}
