// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.NpcMessage
{
    // game->npc 通知NPC创建AINpc对象
    public sealed class NotifyNpcCreateObj : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_NPC_CREATE_OBJ;
        public short GetMsgType { get { return MsgType; } }
        public uint SceneId;// 战场ID
        public AiNpcInfo[] vecAINpc;// npc数据
        
        public static void Send(uint sceneId, AiNpcInfo[] vecAINpc, object className)
        {
            var packet = new NotifyNpcCreateObj
            {
                SceneId = sceneId,
                vecAINpc = vecAINpc
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            SceneId = reader.ReadUInt32();
            var length2 = reader.ReadUInt16();
            vecAINpc = new AiNpcInfo[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                vecAINpc[i2] = new AiNpcInfo();
                vecAINpc[i2].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(SceneId);
            ushort count2 = (ushort)(vecAINpc == null ? 0 : vecAINpc.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                vecAINpc[i2].WriteToStream(writer);
            }
        }
    }
}
