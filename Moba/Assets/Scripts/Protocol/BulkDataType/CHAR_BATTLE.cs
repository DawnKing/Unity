// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.BulkDataType
{
    /**
     *  角色战斗数据结构体
     */
    public sealed class CHAR_BATTLE
    {
        public uint charId;// 角色id
        public string char_uuid;// 角色uuid
        public string charName;// 角色名
        public byte charLevel;// 角色等级
        public byte vipLevel;// vip等级
        public uint exp2Time;// 角色双倍经验时间戳
        public uint tankCardExpTime;// 坦克卡双倍经验加成时间戳
        public uint tankCardExpCount;// 坦克卡双倍经验加成次数
        public uint tankActExpBonus;// 活动的坦克经验加成倍率
        public uint tankLevel;// 坦克的等级
        public uint tankId;// 坦克的模板id
        public uint sprayId;// 喷图id
        public uint dropTimes;// 比赛类型掉落次数
        public int passTimes;// 地图通过次数
        public int iElo;// 玩家的战力
        public int avAddCoin;// avatar银币加成
        public int avAddExp;// avatar经验加成
        public int coefK;// 坦克的K值
        public uint iBoosterAttack;// 助手攻击力
        public uint iRobotType;// 机器人类型
        public CHAR_ATTR char_attr;// 角色属性信息
        public PropsInfo[] propsBar;// 道具数据
        public LimitInfo[] limitVec;// gamesvr用到的限制信息
        public TALENT_GRID[] talentTree;// 天赋树信息
        public uint[] crystalVec;// 晶片ID信息
        public uint[] skinQualityVec;// 拥有对应品质皮肤数
        public uint eloSectionId;// 天梯段位
        public YCARD_INFO[] yCardVec;// 佣兵卡信息
        public uint[] newTankBuffVec;// 新坦克天使buff信息
        public TankPartInfo[] tankPartVec;// 坦克部件信息
        public uint nTankPartScore;// 坦克部件得分
        public uint allTankStar;// 所有坦克星级
        public BATTLE_INFO info;// 来自tracksvr的信息
        public void ReadFromStream(BinaryReader reader)
        {
            charId = reader.ReadUInt32();
            char_uuid = reader.ReadString();
            charName = reader.ReadString();
            charLevel = reader.ReadByte();
            vipLevel = reader.ReadByte();
            exp2Time = reader.ReadUInt32();
            tankCardExpTime = reader.ReadUInt32();
            tankCardExpCount = reader.ReadUInt32();
            tankActExpBonus = reader.ReadUInt32();
            tankLevel = reader.ReadUInt32();
            tankId = reader.ReadUInt32();
            sprayId = reader.ReadUInt32();
            dropTimes = reader.ReadUInt32();
            passTimes = reader.ReadInt32();
            iElo = reader.ReadInt32();
            avAddCoin = reader.ReadInt32();
            avAddExp = reader.ReadInt32();
            coefK = reader.ReadInt32();
            iBoosterAttack = reader.ReadUInt32();
            iRobotType = reader.ReadUInt32();
            char_attr = new CHAR_ATTR();
            char_attr.ReadFromStream(reader);
            var length22 = reader.ReadUInt16();
            propsBar = new PropsInfo[length22];
            for (var i22 = 0; i22 < length22; i22++)
            {
                propsBar[i22] = new PropsInfo();
                propsBar[i22].ReadFromStream(reader);
            }
            var length23 = reader.ReadUInt16();
            limitVec = new LimitInfo[length23];
            for (var i23 = 0; i23 < length23; i23++)
            {
                limitVec[i23] = new LimitInfo();
                limitVec[i23].ReadFromStream(reader);
            }
            var length24 = reader.ReadUInt16();
            talentTree = new TALENT_GRID[length24];
            for (var i24 = 0; i24 < length24; i24++)
            {
                talentTree[i24] = new TALENT_GRID();
                talentTree[i24].ReadFromStream(reader);
            }
            var length25 = reader.ReadUInt16();
            crystalVec = new uint[length25];
            for (var i25 = 0; i25 < length25; i25++)
            {
                crystalVec[i25] = reader.ReadUInt32();
            }
            var length26 = reader.ReadUInt16();
            skinQualityVec = new uint[length26];
            for (var i26 = 0; i26 < length26; i26++)
            {
                skinQualityVec[i26] = reader.ReadUInt32();
            }
            eloSectionId = reader.ReadUInt32();
            var length28 = reader.ReadUInt16();
            yCardVec = new YCARD_INFO[length28];
            for (var i28 = 0; i28 < length28; i28++)
            {
                yCardVec[i28] = new YCARD_INFO();
                yCardVec[i28].ReadFromStream(reader);
            }
            var length29 = reader.ReadUInt16();
            newTankBuffVec = new uint[length29];
            for (var i29 = 0; i29 < length29; i29++)
            {
                newTankBuffVec[i29] = reader.ReadUInt32();
            }
            var length30 = reader.ReadUInt16();
            tankPartVec = new TankPartInfo[length30];
            for (var i30 = 0; i30 < length30; i30++)
            {
                tankPartVec[i30] = new TankPartInfo();
                tankPartVec[i30].ReadFromStream(reader);
            }
            nTankPartScore = reader.ReadUInt32();
            allTankStar = reader.ReadUInt32();
            info = new BATTLE_INFO();
            info.ReadFromStream(reader);
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(charId);
            writer.Write(char_uuid);
            writer.Write(charName);
            writer.Write(charLevel);
            writer.Write(vipLevel);
            writer.Write(exp2Time);
            writer.Write(tankCardExpTime);
            writer.Write(tankCardExpCount);
            writer.Write(tankActExpBonus);
            writer.Write(tankLevel);
            writer.Write(tankId);
            writer.Write(sprayId);
            writer.Write(dropTimes);
            writer.Write(passTimes);
            writer.Write(iElo);
            writer.Write(avAddCoin);
            writer.Write(avAddExp);
            writer.Write(coefK);
            writer.Write(iBoosterAttack);
            writer.Write(iRobotType);
            char_attr.WriteToStream(writer);
            ushort count22 = (ushort)(propsBar == null ? 0 : propsBar.Length);
            writer.Write(count22);
            for(var i22 = 0; i22 < count22; i22++)
            {
                propsBar[i22].WriteToStream(writer);
            }
            ushort count23 = (ushort)(limitVec == null ? 0 : limitVec.Length);
            writer.Write(count23);
            for(var i23 = 0; i23 < count23; i23++)
            {
                limitVec[i23].WriteToStream(writer);
            }
            ushort count24 = (ushort)(talentTree == null ? 0 : talentTree.Length);
            writer.Write(count24);
            for(var i24 = 0; i24 < count24; i24++)
            {
                talentTree[i24].WriteToStream(writer);
            }
            ushort count25 = (ushort)(crystalVec == null ? 0 : crystalVec.Length);
            writer.Write(count25);
            for(var i25 = 0; i25 < count25; i25++)
            {
                writer.Write(crystalVec[i25]);
            }
            ushort count26 = (ushort)(skinQualityVec == null ? 0 : skinQualityVec.Length);
            writer.Write(count26);
            for(var i26 = 0; i26 < count26; i26++)
            {
                writer.Write(skinQualityVec[i26]);
            }
            writer.Write(eloSectionId);
            ushort count28 = (ushort)(yCardVec == null ? 0 : yCardVec.Length);
            writer.Write(count28);
            for(var i28 = 0; i28 < count28; i28++)
            {
                yCardVec[i28].WriteToStream(writer);
            }
            ushort count29 = (ushort)(newTankBuffVec == null ? 0 : newTankBuffVec.Length);
            writer.Write(count29);
            for(var i29 = 0; i29 < count29; i29++)
            {
                writer.Write(newTankBuffVec[i29]);
            }
            ushort count30 = (ushort)(tankPartVec == null ? 0 : tankPartVec.Length);
            writer.Write(count30);
            for(var i30 = 0; i30 < count30; i30++)
            {
                tankPartVec[i30].WriteToStream(writer);
            }
            writer.Write(nTankPartScore);
            writer.Write(allTankStar);
            info.WriteToStream(writer);
        }
    }
}
