// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.SystemMessage
{
    /**
     * 服务端通知客户端的通用错误消息
     * Server->Client 
     * 通过消息编号传递，
     */
    public sealed class SystemErrorMessage : IProtocol
    {
        public const short MsgType = MessageType.MSG_SYSTEM_ERRORMESSAGE;
        public short GetMsgType { get { return MsgType; } }
        public uint MsgID;// 对应处理的那条消息时出现的提示
        public int ErrNo;// 提示的id
        public string[] errParamVec;// 对应的参数
        
        public static void Send(uint msgID, int errNo, string[] errParamVec, object className)
        {
            var packet = new SystemErrorMessage
            {
                MsgID = msgID,
                ErrNo = errNo,
                errParamVec = errParamVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            MsgID = reader.ReadUInt32();
            ErrNo = reader.ReadInt32();
            var length3 = reader.ReadUInt16();
            errParamVec = new string[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                errParamVec[i3] = reader.ReadString();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(MsgID);
            writer.Write(ErrNo);
            ushort count3 = (ushort)(errParamVec == null ? 0 : errParamVec.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                writer.Write(errParamVec[i3]);
            }
        }
    }
}
