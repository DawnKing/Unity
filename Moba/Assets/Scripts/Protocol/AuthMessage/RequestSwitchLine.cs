// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.AuthMessage
{
    // MSGTYPE_DECLARE(MSG_AUTH_REQUEST_SWITCH_LINE),
    // 请求切换分线
    public sealed class RequestSwitchLine : IProtocol
    {
        public const short MsgType = MessageType.MSG_AUTH_REQUEST_SWITCH_LINE;
        public short GetMsgType { get { return MsgType; } }
        public uint sessionkey;// 验证成功后获取的SESSIONKEY
        public byte VipLevel;// 玩家的vip等级,vip过期填0
        public uint clientSid;// 客户端选择的区服id
        public uint wallowtime;// gate上记录的wallowtime 分钟
        public int isPwdCheck;// 二级密码是否已验证
        
        public static void Send(uint sessionkey, byte vipLevel, uint clientSid, uint wallowtime, int isPwdCheck, object className)
        {
            var packet = new RequestSwitchLine
            {
                sessionkey = sessionkey,
                VipLevel = vipLevel,
                clientSid = clientSid,
                wallowtime = wallowtime,
                isPwdCheck = isPwdCheck
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            sessionkey = reader.ReadUInt32();
            VipLevel = reader.ReadByte();
            clientSid = reader.ReadUInt32();
            wallowtime = reader.ReadUInt32();
            isPwdCheck = reader.ReadInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(sessionkey);
            writer.Write(VipLevel);
            writer.Write(clientSid);
            writer.Write(wallowtime);
            writer.Write(isPwdCheck);
        }
    }
}
