// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.MasterPrenticeMessage
{
    // MSGTYPE_DECLARE(MSG_NOTIFY_MP_QUEST_LIST)
    // 通知师徒任务信息列表
    public sealed class NotifyMPQuestList : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_MP_QUEST_LIST;
        public short GetMsgType { get { return MsgType; } }
        public string strUuid;// 角色UUID
        public MASTER_PRENTICE_QUEST_INFO[] vecQuest;// 任务信息
        
        public static void Send(string strUuid, MASTER_PRENTICE_QUEST_INFO[] vecQuest, object className)
        {
            var packet = new NotifyMPQuestList
            {
                strUuid = strUuid,
                vecQuest = vecQuest
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            strUuid = reader.ReadString();
            var length2 = reader.ReadUInt16();
            vecQuest = new MASTER_PRENTICE_QUEST_INFO[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                vecQuest[i2] = new MASTER_PRENTICE_QUEST_INFO();
                vecQuest[i2].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(strUuid);
            ushort count2 = (ushort)(vecQuest == null ? 0 : vecQuest.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                vecQuest[i2].WriteToStream(writer);
            }
        }
    }
}
