// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.VipMessage
{
    // ----------------------------------------------------------------------
    ///    @file            protocol/VipMessage.h
    ///    @brief
    ///    @author          Bob Lee (bob@sxicube.cn)
    ///    @copyright       Sixcube Information Technology Co,. Ltd. (2012)
    ///    @date            2012/7/8 16:38:15
    // ----------------------------------------------------------------------
    // MSGTYPE_DECLARE_ASSIGN(MSG_NOTIFY_VIP_CHANGE, 1300),
    // 通知VIP变化信息
    public sealed class NotifyVipChange : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_VIP_CHANGE;
        public short GetMsgType { get { return MsgType; } }
        public uint Points;// VIP点数
        public uint Ended;// VIP特权结束时间
        public uint AddTime;// 本次增加的时间（小时）
        public uint TodayAddPoints;// VIP点数今日的增加值
        public uint superVipEndTime;// 超级VIP截止时间
        public uint superVipAddTime;// 超级VIP增加时间
        
        public static void Send(uint points, uint ended, uint addTime, uint todayAddPoints, uint superVipEndTime, uint superVipAddTime, object className)
        {
            var packet = new NotifyVipChange
            {
                Points = points,
                Ended = ended,
                AddTime = addTime,
                TodayAddPoints = todayAddPoints,
                superVipEndTime = superVipEndTime,
                superVipAddTime = superVipAddTime
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            Points = reader.ReadUInt32();
            Ended = reader.ReadUInt32();
            AddTime = reader.ReadUInt32();
            TodayAddPoints = reader.ReadUInt32();
            superVipEndTime = reader.ReadUInt32();
            superVipAddTime = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(Points);
            writer.Write(Ended);
            writer.Write(AddTime);
            writer.Write(TodayAddPoints);
            writer.Write(superVipEndTime);
            writer.Write(superVipAddTime);
        }
    }
}
