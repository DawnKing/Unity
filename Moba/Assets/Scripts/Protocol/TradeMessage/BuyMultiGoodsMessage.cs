// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.TradeMessage
{
    /// 购买商品
    public sealed class BuyMultiGoodsMessage : IProtocol
    {
        public const short MsgType = MessageType.MSG_GOODS_SHOP_BUY_MULTI;
        public short GetMsgType { get { return MsgType; } }
        public int type;
        public GoodsBuyInfo[] infos;// 购买的列表
        public GoodsCoinVal[] coinVec;// 使用的货币
        
        public static void Send(int type, GoodsBuyInfo[] infos, GoodsCoinVal[] coinVec, object className)
        {
            var packet = new BuyMultiGoodsMessage
            {
                type = type,
                infos = infos,
                coinVec = coinVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            type = reader.ReadInt32();
            var length2 = reader.ReadUInt16();
            infos = new GoodsBuyInfo[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                infos[i2] = new GoodsBuyInfo();
                infos[i2].ReadFromStream(reader);
            }
            var length3 = reader.ReadUInt16();
            coinVec = new GoodsCoinVal[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                coinVec[i3] = new GoodsCoinVal();
                coinVec[i3].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(type);
            ushort count2 = (ushort)(infos == null ? 0 : infos.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                infos[i2].WriteToStream(writer);
            }
            ushort count3 = (ushort)(coinVec == null ? 0 : coinVec.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                coinVec[i3].WriteToStream(writer);
            }
        }
    }
}
