// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.AwardMessage
{
    // 礼包领取类型
    // 黄钻升级礼包(360v计划等级礼包)
    // 黄钻每日礼包(360v计划每日礼包)
    // 黄钻新手礼包(360v计划特供礼包)
    // 邀请好友
    // 蓝钻升级礼包
    // 蓝钻每日礼包
    // 蓝钻新手礼包(360v计划年费特供礼包)
    // 3366每日礼包
    // qq热血礼包(邮件发送,只能给予物品)
    // qq回归礼包(邮件发送,只能给予物品)
    // qq召唤礼包(邮件发送,只能给予物品)
    // qq重归礼包(邮件发送,只能给予物品)
    // 活动邀请好友礼包
    // 活动召回老朋友礼包
    // qq邀请好友人数礼包
    // QQ管家盒子每日礼包
    // TGP每日礼包
    // QQ浏览器每日礼包
    // 360游戏大厅每日礼包
    // 超级VIP每月礼包
    // 360游戏大厅单次礼包
    // VIP每周签到礼包
    // 大厅升级礼包
    // 大厅每日礼包
    // 大厅新手礼包
    // 年费黄钻每日额外礼包(360v计划年费每日礼包)(仅做显示用,不可作为领取类型)
    // 年费蓝钻每日额外礼包(仅做显示用,不可作为领取类)
    // 豪华蓝钻每日额外礼包(仅做显示用,不可作为领取类)
    // MSGTYPE_DECLARE(MSG_REQUEST_DRAW_GIFT),
    // 请求领取礼包
    public sealed class RequestDrawGift : IProtocol
    {
        public const short MsgType = MessageType.MSG_REQUEST_DRAW_GIFT;
        public short GetMsgType { get { return MsgType; } }
        public byte GiftType;// 礼包领取类型,有效值: <100 enum AWARD_GIFT_TYPE
        public uint Level;// 礼包等级
        
        public static void Send(byte giftType, uint level, object className)
        {
            var packet = new RequestDrawGift
            {
                GiftType = giftType,
                Level = level
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            GiftType = reader.ReadByte();
            Level = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(GiftType);
            writer.Write(Level);
        }
    }
}
