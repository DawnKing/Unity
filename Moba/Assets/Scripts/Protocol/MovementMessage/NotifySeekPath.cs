// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.ShareTypes;
namespace GameProtocol.MovementMessage
{
    // MSGTYPE_DECLARE(MSG_NOTIFY_SEEK_PATH),
    // 通知寻径结果
    public sealed class NotifySeekPath : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_SEEK_PATH;
        public short GetMsgType { get { return MsgType; } }
        public uint sceneId;// 战场id
        public ulong oid;// 对象id
        public int Res;// 寻径结果 enum FIND_PATH_ERR_CODE
        public MapPos[] pathVec;// 路径信息
        
        public static void Send(uint sceneId, ulong oid, int res, MapPos[] pathVec, object className)
        {
            var packet = new NotifySeekPath
            {
                sceneId = sceneId,
                oid = oid,
                Res = res,
                pathVec = pathVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            sceneId = reader.ReadUInt32();
            oid = reader.ReadUInt64();
            Res = reader.ReadInt32();
            var length4 = reader.ReadUInt16();
            pathVec = new MapPos[length4];
            for (var i4 = 0; i4 < length4; i4++)
            {
                pathVec[i4] = new MapPos();
                pathVec[i4].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(sceneId);
            writer.Write(oid);
            writer.Write(Res);
            ushort count4 = (ushort)(pathVec == null ? 0 : pathVec.Length);
            writer.Write(count4);
            for(var i4 = 0; i4 < count4; i4++)
            {
                pathVec[i4].WriteToStream(writer);
            }
        }
    }
}
