// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.FriendMessage
{
    // MSGTYPE_DECLARE(MSG_SYNC_BUDDY_DATA),
    // 同步好友数据
    public sealed class SyncBuddyData : IProtocol
    {
        public const short MsgType = MessageType.MSG_SYNC_BUDDY_DATA;
        public short GetMsgType { get { return MsgType; } }
        public string charUuid;// 玩家的uuid
        public string[] friendVec;// 好友uuid列表
        
        public static void Send(string charUuid, string[] friendVec, object className)
        {
            var packet = new SyncBuddyData
            {
                charUuid = charUuid,
                friendVec = friendVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            charUuid = reader.ReadString();
            var length2 = reader.ReadUInt16();
            friendVec = new string[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                friendVec[i2] = reader.ReadString();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(charUuid);
            ushort count2 = (ushort)(friendVec == null ? 0 : friendVec.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                writer.Write(friendVec[i2]);
            }
        }
    }
}
