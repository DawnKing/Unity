// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.FriendMessage
{
    /// 玩家登陆，初始化关系信息，分包发送
    public sealed class NotifyRelationInit : IProtocol
    {
        public const short MsgType = MessageType.MSG_RELATION_INIT_NOTIFY;
        public short GetMsgType { get { return MsgType; } }
        public RelationFriendInfo[] friendVec;// 好友uuid列表
        public string[] blackVec;// 黑名单uuid列表
        
        public static void Send(RelationFriendInfo[] friendVec, string[] blackVec, object className)
        {
            var packet = new NotifyRelationInit
            {
                friendVec = friendVec,
                blackVec = blackVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            var length1 = reader.ReadUInt16();
            friendVec = new RelationFriendInfo[length1];
            for (var i1 = 0; i1 < length1; i1++)
            {
                friendVec[i1] = new RelationFriendInfo();
                friendVec[i1].ReadFromStream(reader);
            }
            var length2 = reader.ReadUInt16();
            blackVec = new string[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                blackVec[i2] = reader.ReadString();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            ushort count1 = (ushort)(friendVec == null ? 0 : friendVec.Length);
            writer.Write(count1);
            for(var i1 = 0; i1 < count1; i1++)
            {
                friendVec[i1].WriteToStream(writer);
            }
            ushort count2 = (ushort)(blackVec == null ? 0 : blackVec.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                writer.Write(blackVec[i2]);
            }
        }
    }
}
