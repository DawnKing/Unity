// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.QuestMessage
{
    // 同步任务成就信息togame
    public sealed class SyncQuestAcemInfoToGame : IProtocol
    {
        public const short MsgType = MessageType.MSG_SYNC_QUEST_ACEM_LIST_TOGAME;
        public short GetMsgType { get { return MsgType; } }
        public uint SceneId;
        public uint CharOid;
        public QuestInfo[] questVec;
        public AcemInfo[] acemVec;
        
        public static void Send(uint sceneId, uint charOid, QuestInfo[] questVec, AcemInfo[] acemVec, object className)
        {
            var packet = new SyncQuestAcemInfoToGame
            {
                SceneId = sceneId,
                CharOid = charOid,
                questVec = questVec,
                acemVec = acemVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            SceneId = reader.ReadUInt32();
            CharOid = reader.ReadUInt32();
            var length3 = reader.ReadUInt16();
            questVec = new QuestInfo[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                questVec[i3] = new QuestInfo();
                questVec[i3].ReadFromStream(reader);
            }
            var length4 = reader.ReadUInt16();
            acemVec = new AcemInfo[length4];
            for (var i4 = 0; i4 < length4; i4++)
            {
                acemVec[i4] = new AcemInfo();
                acemVec[i4].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(SceneId);
            writer.Write(CharOid);
            ushort count3 = (ushort)(questVec == null ? 0 : questVec.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                questVec[i3].WriteToStream(writer);
            }
            ushort count4 = (ushort)(acemVec == null ? 0 : acemVec.Length);
            writer.Write(count4);
            for(var i4 = 0; i4 < count4; i4++)
            {
                acemVec[i4].WriteToStream(writer);
            }
        }
    }
}
