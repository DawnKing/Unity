// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.MailMessage
{
    // 通知可以发送邮件(buddy -> gate)
    public sealed class NotifyCanSendMail : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_CAN_SENDMAIL;
        public short GetMsgType { get { return MsgType; } }
        public string strReceiver;// 接收者名称
        public string strTitle;// 邮件标题
        public string strText;// 邮件正文
        public int cashNum;// 付款金额
        public int[] itemEquipSlot;// 物品附件对应的装备栏格子
        public int[] itemGrocerySlot;// 物品附件对应的杂货栏格子
        public int time;// 邮件持续时间
        public string tankUuid;// 发送坦克的uuid
        public string receiverUuid;// 接收者Uuid
        
        public static void Send(string strReceiver, string strTitle, string strText, int cashNum, int[] itemEquipSlot, int[] itemGrocerySlot, int time, string tankUuid, string receiverUuid, object className)
        {
            var packet = new NotifyCanSendMail
            {
                strReceiver = strReceiver,
                strTitle = strTitle,
                strText = strText,
                cashNum = cashNum,
                itemEquipSlot = itemEquipSlot,
                itemGrocerySlot = itemGrocerySlot,
                time = time,
                tankUuid = tankUuid,
                receiverUuid = receiverUuid
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            strReceiver = reader.ReadString();
            strTitle = reader.ReadString();
            strText = reader.ReadString();
            cashNum = reader.ReadInt32();
            var length5 = reader.ReadUInt16();
            itemEquipSlot = new int[length5];
            for (var i5 = 0; i5 < length5; i5++)
            {
                itemEquipSlot[i5] = reader.ReadInt32();
            }
            var length6 = reader.ReadUInt16();
            itemGrocerySlot = new int[length6];
            for (var i6 = 0; i6 < length6; i6++)
            {
                itemGrocerySlot[i6] = reader.ReadInt32();
            }
            time = reader.ReadInt32();
            tankUuid = reader.ReadString();
            receiverUuid = reader.ReadString();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(strReceiver);
            writer.Write(strTitle);
            writer.Write(strText);
            writer.Write(cashNum);
            ushort count5 = (ushort)(itemEquipSlot == null ? 0 : itemEquipSlot.Length);
            writer.Write(count5);
            for(var i5 = 0; i5 < count5; i5++)
            {
                writer.Write(itemEquipSlot[i5]);
            }
            ushort count6 = (ushort)(itemGrocerySlot == null ? 0 : itemGrocerySlot.Length);
            writer.Write(count6);
            for(var i6 = 0; i6 < count6; i6++)
            {
                writer.Write(itemGrocerySlot[i6]);
            }
            writer.Write(time);
            writer.Write(tankUuid);
            writer.Write(receiverUuid);
        }
    }
}
