// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.ClusterMessage
{
    /// MSGTYPE_DECLARE(MSG_BRIDGE_RESPONSE),				// 桥接服务器响应
    public sealed class BridgeResponse : IProtocol
    {
        public const short MsgType = MessageType.MSG_BRIDGE_RESPONSE;
        public short GetMsgType { get { return MsgType; } }
        public uint reqcmd;// HTTP请求的命令类型
        public uint svrUid;// 对应请求的服务器UID
        public uint reqSeq;// 对应请求的内容
        public int state;// 对应线程操作的返回码
        public uint resCode;// 对应HTTP的返回代码
        public double resTime;// 对应HTTP的请求处理时间
        public double resDns;// 对应HTTP的域名解析时间
        public double resConn;// 对应HTTP的连接时间
        public string response;// 请求返回内容
        public string account;// 帐号
        public int reqType;// 请求时的请求类型(登录, 登出等)
        
        public static void Send(uint reqcmd, uint svrUid, uint reqSeq, int state, uint resCode, double resTime, double resDns, double resConn, string response, string account, int reqType, object className)
        {
            var packet = new BridgeResponse
            {
                reqcmd = reqcmd,
                svrUid = svrUid,
                reqSeq = reqSeq,
                state = state,
                resCode = resCode,
                resTime = resTime,
                resDns = resDns,
                resConn = resConn,
                response = response,
                account = account,
                reqType = reqType
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            reqcmd = reader.ReadUInt32();
            svrUid = reader.ReadUInt32();
            reqSeq = reader.ReadUInt32();
            state = reader.ReadInt32();
            resCode = reader.ReadUInt32();
            resTime = reader.ReadSingle();
            resDns = reader.ReadSingle();
            resConn = reader.ReadSingle();
            response = reader.ReadString();
            account = reader.ReadString();
            reqType = reader.ReadInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(reqcmd);
            writer.Write(svrUid);
            writer.Write(reqSeq);
            writer.Write(state);
            writer.Write(resCode);
            writer.Write(resTime);
            writer.Write(resDns);
            writer.Write(resConn);
            writer.Write(response);
            writer.Write(account);
            writer.Write(reqType);
        }
    }
}
