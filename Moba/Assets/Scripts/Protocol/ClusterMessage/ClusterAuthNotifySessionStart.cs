// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.ClusterMessage
{
    //MSGTYPE_DECLARE(MSG_CLUSTER_AUTH_NOTIFY_SSTART),
    //认证中心->，通知有登录开始
    public sealed class ClusterAuthNotifySessionStart : IProtocol
    {
        public const short MsgType = MessageType.MSG_CLUSTER_AUTH_NOTIFY_SSTART;
        public short GetMsgType { get { return MsgType; } }
        public uint region_id;// 区服的ID
        public uint svr_uid;// 通知事件源所在的服务器UID
        public uint client_cid;// 在对应服务器上的ＣＩＤ
        public uint session;// SessionKey
        public int isWallow;// 0：不沉迷；1：沉迷；-1：待确定
        public int nowWallow;// 当前周期防沉迷累计在线时间(秒数)
        public string login;// 登录名
        public int isPwdCheck;// 二级密码是否已验证（用于分线切换后不重复验证）
        
        public static void Send(uint region_id, uint svr_uid, uint client_cid, uint session, int isWallow, int nowWallow, string login, int isPwdCheck, object className)
        {
            var packet = new ClusterAuthNotifySessionStart
            {
                region_id = region_id,
                svr_uid = svr_uid,
                client_cid = client_cid,
                session = session,
                isWallow = isWallow,
                nowWallow = nowWallow,
                login = login,
                isPwdCheck = isPwdCheck
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            region_id = reader.ReadUInt32();
            svr_uid = reader.ReadUInt32();
            client_cid = reader.ReadUInt32();
            session = reader.ReadUInt32();
            isWallow = reader.ReadInt32();
            nowWallow = reader.ReadInt32();
            login = reader.ReadString();
            isPwdCheck = reader.ReadInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(region_id);
            writer.Write(svr_uid);
            writer.Write(client_cid);
            writer.Write(session);
            writer.Write(isWallow);
            writer.Write(nowWallow);
            writer.Write(login);
            writer.Write(isPwdCheck);
        }
    }
}
