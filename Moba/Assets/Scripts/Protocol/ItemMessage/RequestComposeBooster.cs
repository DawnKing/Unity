// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.ItemMessage
{
    /// 请求合成助手
    public sealed class RequestComposeBooster : IProtocol
    {
        public const short MsgType = MessageType.MSG_REQUEST_BOOSTER_COMPOSE;
        public short GetMsgType { get { return MsgType; } }
        public short slot;// 助手格子
        public short[] mtlSlotVec;// 材料格子(同一个放多个，则数组中有多个相同)
        
        public static void Send(short slot, short[] mtlSlotVec, object className)
        {
            var packet = new RequestComposeBooster
            {
                slot = slot,
                mtlSlotVec = mtlSlotVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            slot = reader.ReadInt16();
            var length2 = reader.ReadUInt16();
            mtlSlotVec = new short[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                mtlSlotVec[i2] = reader.ReadInt16();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(slot);
            ushort count2 = (ushort)(mtlSlotVec == null ? 0 : mtlSlotVec.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                writer.Write(mtlSlotVec[i2]);
            }
        }
    }
}
