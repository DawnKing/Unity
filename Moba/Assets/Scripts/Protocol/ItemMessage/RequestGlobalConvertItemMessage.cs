// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.TradeMessage;
namespace GameProtocol.ItemMessage
{
    /// 请求物品兑换
    public sealed class RequestGlobalConvertItemMessage : IProtocol
    {
        public const short MsgType = MessageType.MSG_REQUEST_GLOBAL_CONVERT_ITEM;
        public short GetMsgType { get { return MsgType; } }
        public uint acctOid;// 玩家账号ID
        public uint actType;// 活动类型
        public ConvertInfo[] convertVec;// 兑换序列（一键兑换需要按兑换树从底向上排序）
        public GoodsCoinVal[] coinVec;// 使用的货币
        
        public static void Send(uint acctOid, uint actType, ConvertInfo[] convertVec, GoodsCoinVal[] coinVec, object className)
        {
            var packet = new RequestGlobalConvertItemMessage
            {
                acctOid = acctOid,
                actType = actType,
                convertVec = convertVec,
                coinVec = coinVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            acctOid = reader.ReadUInt32();
            actType = reader.ReadUInt32();
            var length3 = reader.ReadUInt16();
            convertVec = new ConvertInfo[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                convertVec[i3] = new ConvertInfo();
                convertVec[i3].ReadFromStream(reader);
            }
            var length4 = reader.ReadUInt16();
            coinVec = new GoodsCoinVal[length4];
            for (var i4 = 0; i4 < length4; i4++)
            {
                coinVec[i4] = new GoodsCoinVal();
                coinVec[i4].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(acctOid);
            writer.Write(actType);
            ushort count3 = (ushort)(convertVec == null ? 0 : convertVec.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                convertVec[i3].WriteToStream(writer);
            }
            ushort count4 = (ushort)(coinVec == null ? 0 : coinVec.Length);
            writer.Write(count4);
            for(var i4 = 0; i4 < count4; i4++)
            {
                coinVec[i4].WriteToStream(writer);
            }
        }
    }
}
