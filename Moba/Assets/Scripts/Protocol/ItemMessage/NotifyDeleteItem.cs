// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.ItemMessage
{
    /// 通知删除物品
    public sealed class NotifyDeleteItem : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_ITEM_DELETE;
        public short GetMsgType { get { return MsgType; } }
        public uint contType;// enum CONTAINER_TYPE
        public short[] slotVec;// 需要清空的格子索引
        public string[] itemUuidVec;// 删除的物品uuid信息
        
        public static void Send(uint contType, short[] slotVec, string[] itemUuidVec, object className)
        {
            var packet = new NotifyDeleteItem
            {
                contType = contType,
                slotVec = slotVec,
                itemUuidVec = itemUuidVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            contType = reader.ReadUInt32();
            var length2 = reader.ReadUInt16();
            slotVec = new short[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                slotVec[i2] = reader.ReadInt16();
            }
            var length3 = reader.ReadUInt16();
            itemUuidVec = new string[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                itemUuidVec[i3] = reader.ReadString();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(contType);
            ushort count2 = (ushort)(slotVec == null ? 0 : slotVec.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                writer.Write(slotVec[i2]);
            }
            ushort count3 = (ushort)(itemUuidVec == null ? 0 : itemUuidVec.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                writer.Write(itemUuidVec[i3]);
            }
        }
    }
}
