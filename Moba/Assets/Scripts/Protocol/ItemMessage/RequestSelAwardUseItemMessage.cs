// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.ItemMessage
{
    /// 请求使用物品获取选择奖励
    public sealed class RequestSelAwardUseItemMessage : IProtocol
    {
        public const short MsgType = MessageType.MSG_REQUEST_SEL_AWARD_USE_ITEM;
        public short GetMsgType { get { return MsgType; } }
        public const int SPT_PARAM_1 = 1;//参数1
        public const int SPT_PARAM_2 = 2;//参数2
        public const int SPT_PARAM_3 = 3;//参数3
        public const int SPT_PARAM_4 = 4;//参数4
        public const int SPT_PARAM_5 = 5;//参数5
        public uint contType;// 物品所在的容器，enum CONTAINER_TYPE
        public short slotNo;// 物品的格子
        public int count;// 使用的数量
        public int selParam;// 选择参数  enum SEL_PARAM_TYPE
        
        public static void Send(uint contType, short slotNo, int count, int selParam, object className)
        {
            var packet = new RequestSelAwardUseItemMessage
            {
                contType = contType,
                slotNo = slotNo,
                count = count,
                selParam = selParam
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            contType = reader.ReadUInt32();
            slotNo = reader.ReadInt16();
            count = reader.ReadInt32();
            selParam = reader.ReadInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(contType);
            writer.Write(slotNo);
            writer.Write(count);
            writer.Write(selParam);
        }
    }
}
