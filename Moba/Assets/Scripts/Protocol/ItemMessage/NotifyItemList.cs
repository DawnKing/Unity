// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.ItemMessage
{
    // MSGTYPE_DECLARE_ASSIGN(MSG_NOTIFY_ITEM_LIST, 2000),         // 通知物品信息
    public sealed class NotifyItemList : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_ITEM_LIST;
        public short GetMsgType { get { return MsgType; } }
        public const int PLAYER_LOGIN_ITEM = 1;// 玩家登录
        public const int ADD_ITEM = 2;// 获得新物品
        public const int REFRESH_ITEM = 3;// 刷新整个包裹
        public const int TEMP_POP = 4;// 从临时包裹中取出
        public uint contType;// enum CONTAINER_TYPE
        public ITEM_INSTANCE[] itemVec;// 物品信息
        public byte notifyType;// 物品信息通知类型
        
        public static void Send(uint contType, ITEM_INSTANCE[] itemVec, byte notifyType, object className)
        {
            var packet = new NotifyItemList
            {
                contType = contType,
                itemVec = itemVec,
                notifyType = notifyType
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            contType = reader.ReadUInt32();
            var length2 = reader.ReadUInt16();
            itemVec = new ITEM_INSTANCE[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                itemVec[i2] = new ITEM_INSTANCE();
                itemVec[i2].ReadFromStream(reader);
            }
            notifyType = reader.ReadByte();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(contType);
            ushort count2 = (ushort)(itemVec == null ? 0 : itemVec.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                itemVec[i2].WriteToStream(writer);
            }
            writer.Write(notifyType);
        }
    }
}
