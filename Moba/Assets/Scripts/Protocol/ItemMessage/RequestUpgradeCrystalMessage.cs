// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.ItemMessage
{
    /// 请求升阶晶片
    public sealed class RequestUpgradeCrystalMessage : IProtocol
    {
        public const short MsgType = MessageType.MSG_REQUEST_UPGRADE_CRYSTAL;
        public short GetMsgType { get { return MsgType; } }
        public const int EUT_UPGRADE = 0;//熔炉
        public const int EUT_SELL = 1;//出售
        public uint reqType;/// 请求类型
        public uint[] itemIdVec;/// 晶片ID
        
        public static void Send(uint reqType, uint[] itemIdVec, object className)
        {
            var packet = new RequestUpgradeCrystalMessage
            {
                reqType = reqType,
                itemIdVec = itemIdVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            reqType = reader.ReadUInt32();
            var length2 = reader.ReadUInt16();
            itemIdVec = new uint[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                itemIdVec[i2] = reader.ReadUInt32();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(reqType);
            ushort count2 = (ushort)(itemIdVec == null ? 0 : itemIdVec.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                writer.Write(itemIdVec[i2]);
            }
        }
    }
}
