// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.ItemMessage
{
    // ----------------------------------------------------------------------
    ///    @file            protocol/RoomMessage.h
    ///    @brief
    ///    @author          linyixiong
    ///    @copyright       Sixcube Information Technology Co,. Ltd. (2012)
    ///    @date
    // ----------------------------------------------------------------------
    // MSGTYPE_DECLARE_ASSIGN(MSG_REQUEST_SWAP_ITEM, 650),
    // 移动物品
    public sealed class RequestSwapItem : IProtocol
    {
        public const short MsgType = MessageType.MSG_REQUEST_SWAP_ITEM;
        public short GetMsgType { get { return MsgType; } }
        public uint contType;// enum CONTAINER_TYPE
        public short OriginSlot;// 物品起始格
        public short DestSlot;// 物品目标格
        public int count;// 移动的数量
        
        public static void Send(uint contType, short originSlot, short destSlot, int count, object className)
        {
            var packet = new RequestSwapItem
            {
                contType = contType,
                OriginSlot = originSlot,
                DestSlot = destSlot,
                count = count
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            contType = reader.ReadUInt32();
            OriginSlot = reader.ReadInt16();
            DestSlot = reader.ReadInt16();
            count = reader.ReadInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(contType);
            writer.Write(OriginSlot);
            writer.Write(DestSlot);
            writer.Write(count);
        }
    }
}
