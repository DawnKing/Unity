// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.TradeMessage;
namespace GameProtocol.ItemMessage
{
    /// 请求物品兑换
    public sealed class RequestConvertItem : IProtocol
    {
        public const short MsgType = MessageType.MSG_REQUEST_CONVERT_ITEM;
        public short GetMsgType { get { return MsgType; } }
        public ConvertInfo[] convertVec;// 兑换序列（一键兑换需要按兑换树从底向上排序）
        public GoodsCoinVal[] coinVec;// 使用的货币
        
        public static void Send(ConvertInfo[] convertVec, GoodsCoinVal[] coinVec, object className)
        {
            var packet = new RequestConvertItem
            {
                convertVec = convertVec,
                coinVec = coinVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            var length1 = reader.ReadUInt16();
            convertVec = new ConvertInfo[length1];
            for (var i1 = 0; i1 < length1; i1++)
            {
                convertVec[i1] = new ConvertInfo();
                convertVec[i1].ReadFromStream(reader);
            }
            var length2 = reader.ReadUInt16();
            coinVec = new GoodsCoinVal[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                coinVec[i2] = new GoodsCoinVal();
                coinVec[i2].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            ushort count1 = (ushort)(convertVec == null ? 0 : convertVec.Length);
            writer.Write(count1);
            for(var i1 = 0; i1 < count1; i1++)
            {
                convertVec[i1].WriteToStream(writer);
            }
            ushort count2 = (ushort)(coinVec == null ? 0 : coinVec.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                coinVec[i2].WriteToStream(writer);
            }
        }
    }
}
