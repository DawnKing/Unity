// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.BoosterCompeteMessage
{
    /**
     * 请求角色助手竞技场信息
     * MSGTYPE_DECLARE(MSG_NOTIFY_BOOSTER_COMP_INFO)
     */
    public sealed class NotifyBoosterCompInfo : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_BOOSTER_COMP_INFO;
        public short GetMsgType { get { return MsgType; } }
        public uint ChallengeCount;///剩余可挑战次数
        public uint BuyCount;///已购买次数
        public uint BuyLimit;///购买上限
        public uint SequenceWin;///连胜数
        public uint Win;///胜场数
        public uint Lose;///负场数
        public uint CoolTime;///冷却时间戳（绝对时间）
        public uint Rank;///排名
        public uint TodaySeqWin;///今日的连胜数
        public uint CharAtk;///玩家总战力
        
        public static void Send(uint challengeCount, uint buyCount, uint buyLimit, uint sequenceWin, uint win, uint lose, uint coolTime, uint rank, uint todaySeqWin, uint charAtk, object className)
        {
            var packet = new NotifyBoosterCompInfo
            {
                ChallengeCount = challengeCount,
                BuyCount = buyCount,
                BuyLimit = buyLimit,
                SequenceWin = sequenceWin,
                Win = win,
                Lose = lose,
                CoolTime = coolTime,
                Rank = rank,
                TodaySeqWin = todaySeqWin,
                CharAtk = charAtk
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            ChallengeCount = reader.ReadUInt32();
            BuyCount = reader.ReadUInt32();
            BuyLimit = reader.ReadUInt32();
            SequenceWin = reader.ReadUInt32();
            Win = reader.ReadUInt32();
            Lose = reader.ReadUInt32();
            CoolTime = reader.ReadUInt32();
            Rank = reader.ReadUInt32();
            TodaySeqWin = reader.ReadUInt32();
            CharAtk = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(ChallengeCount);
            writer.Write(BuyCount);
            writer.Write(BuyLimit);
            writer.Write(SequenceWin);
            writer.Write(Win);
            writer.Write(Lose);
            writer.Write(CoolTime);
            writer.Write(Rank);
            writer.Write(TodaySeqWin);
            writer.Write(CharAtk);
        }
    }
}
