// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.BoosterCompeteMessage
{
    /**
     * 通知助手竞技赛昨日奖励信息
     * MSGTYPE_DECLARE(MSG_NOTIFY_BOOSTER_COMP_YESTERDAY_AWARD_INFO)
     */
    public sealed class NotifyBstCompYesterdayAwardInfo : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_BOOSTER_COMP_YESTERDAY_AWARD_INFO;
        public short GetMsgType { get { return MsgType; } }
        public byte HasAward;/// 是否有奖励
        public uint YesterdayRank;/// 昨日排名
        public uint Golden;/// 奖励的银币
        public uint ChipId;/// 奖励的芯片ID
        public uint ChipCount;/// 奖励的芯片个数
        public uint m_nItem1;/// 奖励物品1
        public uint m_nCount1;/// 奖励物品1的个数
        public uint m_nItem2;/// 奖励物品2
        public uint m_nCount2;/// 奖励物品2的个数
        
        public static void Send(byte hasAward, uint yesterdayRank, uint golden, uint chipId, uint chipCount, uint m_nItem1, uint m_nCount1, uint m_nItem2, uint m_nCount2, object className)
        {
            var packet = new NotifyBstCompYesterdayAwardInfo
            {
                HasAward = hasAward,
                YesterdayRank = yesterdayRank,
                Golden = golden,
                ChipId = chipId,
                ChipCount = chipCount,
                m_nItem1 = m_nItem1,
                m_nCount1 = m_nCount1,
                m_nItem2 = m_nItem2,
                m_nCount2 = m_nCount2
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            HasAward = reader.ReadByte();
            YesterdayRank = reader.ReadUInt32();
            Golden = reader.ReadUInt32();
            ChipId = reader.ReadUInt32();
            ChipCount = reader.ReadUInt32();
            m_nItem1 = reader.ReadUInt32();
            m_nCount1 = reader.ReadUInt32();
            m_nItem2 = reader.ReadUInt32();
            m_nCount2 = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(HasAward);
            writer.Write(YesterdayRank);
            writer.Write(Golden);
            writer.Write(ChipId);
            writer.Write(ChipCount);
            writer.Write(m_nItem1);
            writer.Write(m_nCount1);
            writer.Write(m_nItem2);
            writer.Write(m_nCount2);
        }
    }
}
