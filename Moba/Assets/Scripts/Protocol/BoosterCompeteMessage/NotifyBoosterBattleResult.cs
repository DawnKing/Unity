// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.BoosterCompeteMessage
{
    /**
     * 通知助手挑战的结果(Gate->Client)
     * MSGTYPE_DECLARE(MSG_NOTIFY_BOOSTER_BATTLE_RESULT)
     */
    public sealed class NotifyBoosterBattleResult : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_BOOSTER_BATTLE_RESULT;
        public short GetMsgType { get { return MsgType; } }
        public byte Win;/// 是否胜利(0 失败， 1 胜利)
        public uint Silver;///奖励银币
        public SettleItemInfo[] itemVec;///奖励物品
        
        public static void Send(byte win, uint silver, SettleItemInfo[] itemVec, object className)
        {
            var packet = new NotifyBoosterBattleResult
            {
                Win = win,
                Silver = silver,
                itemVec = itemVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            Win = reader.ReadByte();
            Silver = reader.ReadUInt32();
            var length3 = reader.ReadUInt16();
            itemVec = new SettleItemInfo[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                itemVec[i3] = new SettleItemInfo();
                itemVec[i3].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(Win);
            writer.Write(Silver);
            ushort count3 = (ushort)(itemVec == null ? 0 : itemVec.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                itemVec[i3].WriteToStream(writer);
            }
        }
    }
}
