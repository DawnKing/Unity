// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.ChapterMessage
{
    // MSGTYPE_DECLARE(MSG_NOTIFY_SCENE_SCORES),
    // 通知客户端，通关评价的成绩
    public sealed class NotifyChapterSceneScores : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_SCENE_SCORES;
        public short GetMsgType { get { return MsgType; } }
        public CHAPTER_SCENE scene;// 本场得分
        public CHAPTER_SCENE best;// 历史最好成绩
        public int[] stat;// 坦克统计信息，参见DATA_STAT_TYPE枚举
        
        public static void Send(CHAPTER_SCENE scene, CHAPTER_SCENE best, int[] stat, object className)
        {
            var packet = new NotifyChapterSceneScores
            {
                scene = scene,
                best = best,
                stat = stat
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            scene = new CHAPTER_SCENE();
            scene.ReadFromStream(reader);
            best = new CHAPTER_SCENE();
            best.ReadFromStream(reader);
            var length3 = reader.ReadUInt16();
            stat = new int[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                stat[i3] = reader.ReadInt32();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            scene.WriteToStream(writer);
            best.WriteToStream(writer);
            ushort count3 = (ushort)(stat == null ? 0 : stat.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                writer.Write(stat[i3]);
            }
        }
    }
}
