// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.ChapterMessage
{
    //  无错误
    //  等级不符
    //  超过每日可通关次数
    //  无此章节
    //  无此关卡
    //  前序通关
    // MSGTYPE_DECLARE(MSG_PVE_CHAPTER_SCENES),
    // 通知客户端，返回玩家章节中所有关卡的信息
    public sealed class NotifyChapterScenes : IProtocol
    {
        public const short MsgType = MessageType.MSG_PVE_CHAPTER_SCENES;
        public short GetMsgType { get { return MsgType; } }
        public uint ChapterId;// 章节ID
        public CHAPTER_SCENE[] scenes;// 场景内关卡信息
        
        public static void Send(uint chapterId, CHAPTER_SCENE[] scenes, object className)
        {
            var packet = new NotifyChapterScenes
            {
                ChapterId = chapterId,
                scenes = scenes
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            ChapterId = reader.ReadUInt32();
            var length2 = reader.ReadUInt16();
            scenes = new CHAPTER_SCENE[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                scenes[i2] = new CHAPTER_SCENE();
                scenes[i2].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(ChapterId);
            ushort count2 = (ushort)(scenes == null ? 0 : scenes.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                scenes[i2].WriteToStream(writer);
            }
        }
    }
}
