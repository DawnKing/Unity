// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.CharMessage
{
    /// 通知其他服务器有新邮件 now : track -> global ->>> tracks
    public sealed class NotifyServerNewMail : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_SERVER_NEW_MAIL;
        public short GetMsgType { get { return MsgType; } }
        public uint[] vOidVec;
        public uint NewCnt;
        
        public static void Send(uint[] vOidVec, uint newCnt, object className)
        {
            var packet = new NotifyServerNewMail
            {
                vOidVec = vOidVec,
                NewCnt = newCnt
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            var length1 = reader.ReadUInt16();
            vOidVec = new uint[length1];
            for (var i1 = 0; i1 < length1; i1++)
            {
                vOidVec[i1] = reader.ReadUInt32();
            }
            NewCnt = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            ushort count1 = (ushort)(vOidVec == null ? 0 : vOidVec.Length);
            writer.Write(count1);
            for(var i1 = 0; i1 < count1; i1++)
            {
                writer.Write(vOidVec[i1]);
            }
            writer.Write(NewCnt);
        }
    }
}
