// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.CharMessage
{
    //MSGTYPE_DECLARE(MSG_NOTIFY_PLAYER_LOGIN),
    // gate->track,通知有玩家登录游戏
    public sealed class NotifyPlayerLogin : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_PLAYER_LOGIN;
        public short GetMsgType { get { return MsgType; } }
        public CHAR_BASIC charData;
        public uint session;
        public uint gateSvrId;// 所在的gatesvrid
        public string loginId;// 登录id
        public string token;// 客户端token
        public uint ip;// ip地址
        public byte gmLevel;// gm等级
        public uint avatar;// 角色Avatar的模板ID
        public uint vipLevel;// 角色VIP等级
        public uint LadderElo;// 天梯ELO
        public uint LeisureElo;// 休闲匹配赛ELO
        public CITY_INFO[] cityVec;// 城市信息
        public uint robotType;// 是否是机器人（0表示不是，1为1级机器人，2为2级，类推）
        public uint DecorateId;// 角色（主题）装饰ID
        public uint Setting;// 玩家设定
        public TANK_BRIEF[] tankVec;// 拥有的坦克列表
        public TANK_BRIEF[] hireTankVec;// 租用的坦克列表
        public TANK_BRIEF[] freeWeekTankVec;// 周免的坦克列表
        public TANK_BRIEF[] tryTankVec;// 试用的坦克列表
        public OTHER_BRIEF otherData;// 教师其他简要信息
        public uint[] bstCompTec;// 助手竞技赛信息 enum BST_COMP_TEC_TYPE
        public uint eloSectionId;// 本赛季天梯段位
        public uint preEloSectionId;// 上赛季天梯段位
        public uint bltId;// 上线公告ID
        public uint m_nCompetition3V3Elo;// 3v3争霸赛elo
        
        public static void Send(CHAR_BASIC charData, uint session, uint gateSvrId, string loginId, string token, uint ip, byte gmLevel, uint avatar, uint vipLevel, uint ladderElo, uint leisureElo, CITY_INFO[] cityVec, uint robotType, uint decorateId, uint setting, TANK_BRIEF[] tankVec, TANK_BRIEF[] hireTankVec, TANK_BRIEF[] freeWeekTankVec, TANK_BRIEF[] tryTankVec, OTHER_BRIEF otherData, uint[] bstCompTec, uint eloSectionId, uint preEloSectionId, uint bltId, uint m_nCompetition3V3Elo, object className)
        {
            var packet = new NotifyPlayerLogin
            {
                charData = charData,
                session = session,
                gateSvrId = gateSvrId,
                loginId = loginId,
                token = token,
                ip = ip,
                gmLevel = gmLevel,
                avatar = avatar,
                vipLevel = vipLevel,
                LadderElo = ladderElo,
                LeisureElo = leisureElo,
                cityVec = cityVec,
                robotType = robotType,
                DecorateId = decorateId,
                Setting = setting,
                tankVec = tankVec,
                hireTankVec = hireTankVec,
                freeWeekTankVec = freeWeekTankVec,
                tryTankVec = tryTankVec,
                otherData = otherData,
                bstCompTec = bstCompTec,
                eloSectionId = eloSectionId,
                preEloSectionId = preEloSectionId,
                bltId = bltId,
                m_nCompetition3V3Elo = m_nCompetition3V3Elo
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            charData = new CHAR_BASIC();
            charData.ReadFromStream(reader);
            session = reader.ReadUInt32();
            gateSvrId = reader.ReadUInt32();
            loginId = reader.ReadString();
            token = reader.ReadString();
            ip = reader.ReadUInt32();
            gmLevel = reader.ReadByte();
            avatar = reader.ReadUInt32();
            vipLevel = reader.ReadUInt32();
            LadderElo = reader.ReadUInt32();
            LeisureElo = reader.ReadUInt32();
            var length12 = reader.ReadUInt16();
            cityVec = new CITY_INFO[length12];
            for (var i12 = 0; i12 < length12; i12++)
            {
                cityVec[i12] = new CITY_INFO();
                cityVec[i12].ReadFromStream(reader);
            }
            robotType = reader.ReadUInt32();
            DecorateId = reader.ReadUInt32();
            Setting = reader.ReadUInt32();
            var length16 = reader.ReadUInt16();
            tankVec = new TANK_BRIEF[length16];
            for (var i16 = 0; i16 < length16; i16++)
            {
                tankVec[i16] = new TANK_BRIEF();
                tankVec[i16].ReadFromStream(reader);
            }
            var length17 = reader.ReadUInt16();
            hireTankVec = new TANK_BRIEF[length17];
            for (var i17 = 0; i17 < length17; i17++)
            {
                hireTankVec[i17] = new TANK_BRIEF();
                hireTankVec[i17].ReadFromStream(reader);
            }
            var length18 = reader.ReadUInt16();
            freeWeekTankVec = new TANK_BRIEF[length18];
            for (var i18 = 0; i18 < length18; i18++)
            {
                freeWeekTankVec[i18] = new TANK_BRIEF();
                freeWeekTankVec[i18].ReadFromStream(reader);
            }
            var length19 = reader.ReadUInt16();
            tryTankVec = new TANK_BRIEF[length19];
            for (var i19 = 0; i19 < length19; i19++)
            {
                tryTankVec[i19] = new TANK_BRIEF();
                tryTankVec[i19].ReadFromStream(reader);
            }
            otherData = new OTHER_BRIEF();
            otherData.ReadFromStream(reader);
            var length21 = reader.ReadUInt16();
            bstCompTec = new uint[length21];
            for (var i21 = 0; i21 < length21; i21++)
            {
                bstCompTec[i21] = reader.ReadUInt32();
            }
            eloSectionId = reader.ReadUInt32();
            preEloSectionId = reader.ReadUInt32();
            bltId = reader.ReadUInt32();
            m_nCompetition3V3Elo = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            charData.WriteToStream(writer);
            writer.Write(session);
            writer.Write(gateSvrId);
            writer.Write(loginId);
            writer.Write(token);
            writer.Write(ip);
            writer.Write(gmLevel);
            writer.Write(avatar);
            writer.Write(vipLevel);
            writer.Write(LadderElo);
            writer.Write(LeisureElo);
            ushort count12 = (ushort)(cityVec == null ? 0 : cityVec.Length);
            writer.Write(count12);
            for(var i12 = 0; i12 < count12; i12++)
            {
                cityVec[i12].WriteToStream(writer);
            }
            writer.Write(robotType);
            writer.Write(DecorateId);
            writer.Write(Setting);
            ushort count16 = (ushort)(tankVec == null ? 0 : tankVec.Length);
            writer.Write(count16);
            for(var i16 = 0; i16 < count16; i16++)
            {
                tankVec[i16].WriteToStream(writer);
            }
            ushort count17 = (ushort)(hireTankVec == null ? 0 : hireTankVec.Length);
            writer.Write(count17);
            for(var i17 = 0; i17 < count17; i17++)
            {
                hireTankVec[i17].WriteToStream(writer);
            }
            ushort count18 = (ushort)(freeWeekTankVec == null ? 0 : freeWeekTankVec.Length);
            writer.Write(count18);
            for(var i18 = 0; i18 < count18; i18++)
            {
                freeWeekTankVec[i18].WriteToStream(writer);
            }
            ushort count19 = (ushort)(tryTankVec == null ? 0 : tryTankVec.Length);
            writer.Write(count19);
            for(var i19 = 0; i19 < count19; i19++)
            {
                tryTankVec[i19].WriteToStream(writer);
            }
            otherData.WriteToStream(writer);
            ushort count21 = (ushort)(bstCompTec == null ? 0 : bstCompTec.Length);
            writer.Write(count21);
            for(var i21 = 0; i21 < count21; i21++)
            {
                writer.Write(bstCompTec[i21]);
            }
            writer.Write(eloSectionId);
            writer.Write(preEloSectionId);
            writer.Write(bltId);
            writer.Write(m_nCompetition3V3Elo);
        }
    }
}
