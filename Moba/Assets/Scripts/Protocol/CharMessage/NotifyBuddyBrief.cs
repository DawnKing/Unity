// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.ShareTypes;
namespace GameProtocol.CharMessage
{
    /// MSGTYPE_DECLARE(MSG_NOTIFY_BUDDY_BRIEF),
    /// 通知相关的brief信息
    public sealed class NotifyBuddyBrief : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_BUDDY_BRIEF;
        public short GetMsgType { get { return MsgType; } }
        public BUDDY_BRIEF[] briefVec;// 好友、战队成员等其他玩家信息列表
        
        public static void Send(BUDDY_BRIEF[] briefVec, object className)
        {
            var packet = new NotifyBuddyBrief
            {
                briefVec = briefVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            var length1 = reader.ReadUInt16();
            briefVec = new BUDDY_BRIEF[length1];
            for (var i1 = 0; i1 < length1; i1++)
            {
                briefVec[i1] = new BUDDY_BRIEF();
                briefVec[i1].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            ushort count1 = (ushort)(briefVec == null ? 0 : briefVec.Length);
            writer.Write(count1);
            for(var i1 = 0; i1 < count1; i1++)
            {
                briefVec[i1].WriteToStream(writer);
            }
        }
    }
}
