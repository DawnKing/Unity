// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.CharMessage
{
    /// 通知举报结果 global <-> track
    public sealed class NotifyImpeachResultBetweenSvr : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_IMPEACH_RESULT_IN_SERVER;
        public short GetMsgType { get { return MsgType; } }
        public byte Result;
        public byte roomType;
        public uint SenderId;
        public uint ReceiverId;
        
        public static void Send(byte result, byte roomType, uint senderId, uint receiverId, object className)
        {
            var packet = new NotifyImpeachResultBetweenSvr
            {
                Result = result,
                roomType = roomType,
                SenderId = senderId,
                ReceiverId = receiverId
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            Result = reader.ReadByte();
            roomType = reader.ReadByte();
            SenderId = reader.ReadUInt32();
            ReceiverId = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(Result);
            writer.Write(roomType);
            writer.Write(SenderId);
            writer.Write(ReceiverId);
        }
    }
}
