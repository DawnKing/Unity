// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.CharMessage
{
    /// MSGTYPE_DECLARE(MSG_NOTIFY_CHAR_DATA)
    // 返回角色基本信息
    public sealed class NotifyCharData : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_CHAR_DATA;
        public short GetMsgType { get { return MsgType; } }
        public CHAR_BASIC charData;// 自身数据
        public CHAR_CURRENCY currency;// 货币数据
        public string queryUrl;// 数据查询url
        public int[] technoVec;// 技术信息(胜利场次等enum GAME_COUNT_TYPE)
        
        public static void Send(CHAR_BASIC charData, CHAR_CURRENCY currency, string queryUrl, int[] technoVec, object className)
        {
            var packet = new NotifyCharData
            {
                charData = charData,
                currency = currency,
                queryUrl = queryUrl,
                technoVec = technoVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            charData = new CHAR_BASIC();
            charData.ReadFromStream(reader);
            currency = new CHAR_CURRENCY();
            currency.ReadFromStream(reader);
            queryUrl = reader.ReadString();
            var length4 = reader.ReadUInt16();
            technoVec = new int[length4];
            for (var i4 = 0; i4 < length4; i4++)
            {
                technoVec[i4] = reader.ReadInt32();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            charData.WriteToStream(writer);
            currency.WriteToStream(writer);
            writer.Write(queryUrl);
            ushort count4 = (ushort)(technoVec == null ? 0 : technoVec.Length);
            writer.Write(count4);
            for(var i4 = 0; i4 < count4; i4++)
            {
                writer.Write(technoVec[i4]);
            }
        }
    }
}
