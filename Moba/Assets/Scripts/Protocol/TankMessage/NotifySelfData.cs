// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.TankMessage
{
    /*
     * server->client 上线通知自身数据
     */
    public sealed class NotifySelfData : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_SELF_DATA;
        public short GetMsgType { get { return MsgType; } }
        public TankInfo selfData;// 坦克id
        public short fireRate;// 射速
        public short speed;// 移动速度
        public uint SprayId;// 喷图id
        public PropsInfo[] skillVec;// 技能信息
        public GiveItemStruct[] itemVec;// 掉落物品列表
        public byte KillCount;// 击杀数
        public byte DeadCount;// 死亡数
        public byte AssistCount;// 助攻数
        
        public static void Send(TankInfo selfData, short fireRate, short speed, uint sprayId, PropsInfo[] skillVec, GiveItemStruct[] itemVec, byte killCount, byte deadCount, byte assistCount, object className)
        {
            var packet = new NotifySelfData
            {
                selfData = selfData,
                fireRate = fireRate,
                speed = speed,
                SprayId = sprayId,
                skillVec = skillVec,
                itemVec = itemVec,
                KillCount = killCount,
                DeadCount = deadCount,
                AssistCount = assistCount
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            selfData = new TankInfo();
            selfData.ReadFromStream(reader);
            fireRate = reader.ReadInt16();
            speed = reader.ReadInt16();
            SprayId = reader.ReadUInt32();
            var length5 = reader.ReadUInt16();
            skillVec = new PropsInfo[length5];
            for (var i5 = 0; i5 < length5; i5++)
            {
                skillVec[i5] = new PropsInfo();
                skillVec[i5].ReadFromStream(reader);
            }
            var length6 = reader.ReadUInt16();
            itemVec = new GiveItemStruct[length6];
            for (var i6 = 0; i6 < length6; i6++)
            {
                itemVec[i6] = new GiveItemStruct();
                itemVec[i6].ReadFromStream(reader);
            }
            KillCount = reader.ReadByte();
            DeadCount = reader.ReadByte();
            AssistCount = reader.ReadByte();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            selfData.WriteToStream(writer);
            writer.Write(fireRate);
            writer.Write(speed);
            writer.Write(SprayId);
            ushort count5 = (ushort)(skillVec == null ? 0 : skillVec.Length);
            writer.Write(count5);
            for(var i5 = 0; i5 < count5; i5++)
            {
                skillVec[i5].WriteToStream(writer);
            }
            ushort count6 = (ushort)(itemVec == null ? 0 : itemVec.Length);
            writer.Write(count6);
            for(var i6 = 0; i6 < count6; i6++)
            {
                itemVec[i6].WriteToStream(writer);
            }
            writer.Write(KillCount);
            writer.Write(DeadCount);
            writer.Write(AssistCount);
        }
    }
}
