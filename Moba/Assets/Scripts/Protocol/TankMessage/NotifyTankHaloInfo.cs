// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.TankMessage
{
    // 获得新光环或者光环过期时通知
    // 通知坦克光环过期或者获得的信息 gate -> client
    public sealed class NotifyTankHaloInfo : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_TANK_HALO_INFO;
        public short GetMsgType { get { return MsgType; } }
        public const int HALO_GET = 1;//新获得
        public const int HALO_OUTTIME = 2;//过期
        public uint ActType;// see @ HALO_ACT_TYPE
        public uint HaloId;
        public string[] vTankUuid;//受影响的坦克
        
        public static void Send(uint actType, uint haloId, string[] vTankUuid, object className)
        {
            var packet = new NotifyTankHaloInfo
            {
                ActType = actType,
                HaloId = haloId,
                vTankUuid = vTankUuid
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            ActType = reader.ReadUInt32();
            HaloId = reader.ReadUInt32();
            var length3 = reader.ReadUInt16();
            vTankUuid = new string[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                vTankUuid[i3] = reader.ReadString();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(ActType);
            writer.Write(HaloId);
            ushort count3 = (ushort)(vTankUuid == null ? 0 : vTankUuid.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                writer.Write(vTankUuid[i3]);
            }
        }
    }
}
