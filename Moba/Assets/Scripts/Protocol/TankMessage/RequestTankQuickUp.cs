// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.TradeMessage;
namespace GameProtocol.TankMessage
{
    // 请求坦克一键升级
    public sealed class RequestTankQuickUp : IProtocol
    {
        public const short MsgType = MessageType.MSG_REQUEST_TANK_QUICK_UP;
        public short GetMsgType { get { return MsgType; } }
        public string tankUuid;// 坦克UUID;
        public uint Level;// 请求的目标等级
        public GoodsCoinVal[] coinVec;
        
        public static void Send(string tankUuid, uint level, GoodsCoinVal[] coinVec, object className)
        {
            var packet = new RequestTankQuickUp
            {
                tankUuid = tankUuid,
                Level = level,
                coinVec = coinVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            tankUuid = reader.ReadString();
            Level = reader.ReadUInt32();
            var length3 = reader.ReadUInt16();
            coinVec = new GoodsCoinVal[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                coinVec[i3] = new GoodsCoinVal();
                coinVec[i3].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(tankUuid);
            writer.Write(Level);
            ushort count3 = (ushort)(coinVec == null ? 0 : coinVec.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                coinVec[i3].WriteToStream(writer);
            }
        }
    }
}
