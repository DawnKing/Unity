// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.RoomMessage
{
    /// activity->track
    public sealed class SyncGuildMatchSelectedTank : IProtocol
    {
        public const short MsgType = MessageType.MSG_SYNC_GUILD_MATCH_SELECTED_TANK;
        public short GetMsgType { get { return MsgType; } }
        public uint RoomId;
        public string strUuid;
        public SelTankCount[] vecSelTank;
        
        public static void Send(uint roomId, string strUuid, SelTankCount[] vecSelTank, object className)
        {
            var packet = new SyncGuildMatchSelectedTank
            {
                RoomId = roomId,
                strUuid = strUuid,
                vecSelTank = vecSelTank
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            RoomId = reader.ReadUInt32();
            strUuid = reader.ReadString();
            var length3 = reader.ReadUInt16();
            vecSelTank = new SelTankCount[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                vecSelTank[i3] = new SelTankCount();
                vecSelTank[i3].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(RoomId);
            writer.Write(strUuid);
            ushort count3 = (ushort)(vecSelTank == null ? 0 : vecSelTank.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                vecSelTank[i3].WriteToStream(writer);
            }
        }
    }
}
