// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.RoomMessage
{
    // track->global
    public sealed class NotifyMatchRoomCharData : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_MATCH_ROOM_CHAR_DATA;
        public short GetMsgType { get { return MsgType; } }
        public uint RoomType;// 房间类型 enum ROOM_TYPE
        public uint TeamId;//
        public uint GuildId;//
        public ROOM_CHAR_DATA[] vecChar;// 房间内成员信息
        
        public static void Send(uint roomType, uint teamId, uint guildId, ROOM_CHAR_DATA[] vecChar, object className)
        {
            var packet = new NotifyMatchRoomCharData
            {
                RoomType = roomType,
                TeamId = teamId,
                GuildId = guildId,
                vecChar = vecChar
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            RoomType = reader.ReadUInt32();
            TeamId = reader.ReadUInt32();
            GuildId = reader.ReadUInt32();
            var length4 = reader.ReadUInt16();
            vecChar = new ROOM_CHAR_DATA[length4];
            for (var i4 = 0; i4 < length4; i4++)
            {
                vecChar[i4] = new ROOM_CHAR_DATA();
                vecChar[i4].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(RoomType);
            writer.Write(TeamId);
            writer.Write(GuildId);
            ushort count4 = (ushort)(vecChar == null ? 0 : vecChar.Length);
            writer.Write(count4);
            for(var i4 = 0; i4 < count4; i4++)
            {
                vecChar[i4].WriteToStream(writer);
            }
        }
    }
}
