// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.RoomMessage
{
    // 通知军团赛其他房间的信息
    public sealed class NotifyOtherGuildMatchRoomInfo : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_OTHER_GUILD_MATCH_ROOM_INFO;
        public short GetMsgType { get { return MsgType; } }
        public OTHER_GUILD_ROOM_DATA[] vecRoomInfo;
        
        public static void Send(OTHER_GUILD_ROOM_DATA[] vecRoomInfo, object className)
        {
            var packet = new NotifyOtherGuildMatchRoomInfo
            {
                vecRoomInfo = vecRoomInfo
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            var length1 = reader.ReadUInt16();
            vecRoomInfo = new OTHER_GUILD_ROOM_DATA[length1];
            for (var i1 = 0; i1 < length1; i1++)
            {
                vecRoomInfo[i1] = new OTHER_GUILD_ROOM_DATA();
                vecRoomInfo[i1].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            ushort count1 = (ushort)(vecRoomInfo == null ? 0 : vecRoomInfo.Length);
            writer.Write(count1);
            for(var i1 = 0; i1 < count1; i1++)
            {
                vecRoomInfo[i1].WriteToStream(writer);
            }
        }
    }
}
