// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.RoomMessage
{
    // MSGTYPE_DECLARE(MSG_GAME_CREATE_SCENE),
    // 通知game创建新房间
    public sealed class GameCreateScene : IProtocol
    {
        public const short MsgType = MessageType.MSG_GAME_CREATE_SCENE;
        public short GetMsgType { get { return MsgType; } }
        public uint SceneId;// 房间id
        public byte Type;// 模式enum ROOM_TYPE
        public uint MapId;// 地图模板id
        public uint level;// 战场等级
        public byte dogfallWinCamp;// CAMP_TYPE
        public string raceUuid;// 比赛uuid
        public int redElo;// 红方elo
        public int redAtk;// 红方助手总战力
        public int buleElo;// 蓝方elo
        public int buleAtk;// 蓝方助手总战力
        public uint contestId;// 联赛对阵ID
        public byte bpvpActOpen;// 是否有开启pvp活动掉落
        
        public static void Send(uint sceneId, byte type, uint mapId, uint level, byte dogfallWinCamp, string raceUuid, int redElo, int redAtk, int buleElo, int buleAtk, uint contestId, byte bpvpActOpen, object className)
        {
            var packet = new GameCreateScene
            {
                SceneId = sceneId,
                Type = type,
                MapId = mapId,
                level = level,
                dogfallWinCamp = dogfallWinCamp,
                raceUuid = raceUuid,
                redElo = redElo,
                redAtk = redAtk,
                buleElo = buleElo,
                buleAtk = buleAtk,
                contestId = contestId,
                bpvpActOpen = bpvpActOpen
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            SceneId = reader.ReadUInt32();
            Type = reader.ReadByte();
            MapId = reader.ReadUInt32();
            level = reader.ReadUInt32();
            dogfallWinCamp = reader.ReadByte();
            raceUuid = reader.ReadString();
            redElo = reader.ReadInt32();
            redAtk = reader.ReadInt32();
            buleElo = reader.ReadInt32();
            buleAtk = reader.ReadInt32();
            contestId = reader.ReadUInt32();
            bpvpActOpen = reader.ReadByte();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(SceneId);
            writer.Write(Type);
            writer.Write(MapId);
            writer.Write(level);
            writer.Write(dogfallWinCamp);
            writer.Write(raceUuid);
            writer.Write(redElo);
            writer.Write(redAtk);
            writer.Write(buleElo);
            writer.Write(buleAtk);
            writer.Write(contestId);
            writer.Write(bpvpActOpen);
        }
    }
}
