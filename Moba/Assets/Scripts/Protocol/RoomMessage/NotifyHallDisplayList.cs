// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.RoomMessage
{
    // MSGTYPE_DECLARE(MSG_NOTIFY_HALL_DISPLAY_LIST),
    // 通知客户端大厅显示列表
    public sealed class NotifyHallDisplayList : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_HALL_DISPLAY_LIST;
        public short GetMsgType { get { return MsgType; } }
        public RoomInfo[] roomList;// 房间列表
        public SceneInfo[] sceneList;// 战场列表
        public int Site;// 当前起始位置
        public byte Type;// 模式enum ROOM_TYPE
        
        public static void Send(RoomInfo[] roomList, SceneInfo[] sceneList, int site, byte type, object className)
        {
            var packet = new NotifyHallDisplayList
            {
                roomList = roomList,
                sceneList = sceneList,
                Site = site,
                Type = type
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            var length1 = reader.ReadUInt16();
            roomList = new RoomInfo[length1];
            for (var i1 = 0; i1 < length1; i1++)
            {
                roomList[i1] = new RoomInfo();
                roomList[i1].ReadFromStream(reader);
            }
            var length2 = reader.ReadUInt16();
            sceneList = new SceneInfo[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                sceneList[i2] = new SceneInfo();
                sceneList[i2].ReadFromStream(reader);
            }
            Site = reader.ReadInt32();
            Type = reader.ReadByte();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            ushort count1 = (ushort)(roomList == null ? 0 : roomList.Length);
            writer.Write(count1);
            for(var i1 = 0; i1 < count1; i1++)
            {
                roomList[i1].WriteToStream(writer);
            }
            ushort count2 = (ushort)(sceneList == null ? 0 : sceneList.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                sceneList[i2].WriteToStream(writer);
            }
            writer.Write(Site);
            writer.Write(Type);
        }
    }
}
