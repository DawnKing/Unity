// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.GlobalMessage
{
    // MSGTYPE_DECLARE(MSG_GLOBAL_ROBOT_PAIR),
    // 通知开始进行机器人配对
    public sealed class GlobalRobotPair : IProtocol
    {
        public const short MsgType = MessageType.MSG_GLOBAL_ROBOT_PAIR;
        public short GetMsgType { get { return MsgType; } }
        public uint[] RoomId;// 要配对的房间
        public uint[] CharId;// 要配对的玩家
        
        public static void Send(uint[] roomId, uint[] charId, object className)
        {
            var packet = new GlobalRobotPair
            {
                RoomId = roomId,
                CharId = charId
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            var length1 = reader.ReadUInt16();
            RoomId = new uint[length1];
            for (var i1 = 0; i1 < length1; i1++)
            {
                RoomId[i1] = reader.ReadUInt32();
            }
            var length2 = reader.ReadUInt16();
            CharId = new uint[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                CharId[i2] = reader.ReadUInt32();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            ushort count1 = (ushort)(RoomId == null ? 0 : RoomId.Length);
            writer.Write(count1);
            for(var i1 = 0; i1 < count1; i1++)
            {
                writer.Write(RoomId[i1]);
            }
            ushort count2 = (ushort)(CharId == null ? 0 : CharId.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                writer.Write(CharId[i2]);
            }
        }
    }
}
