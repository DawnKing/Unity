// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.GlobalMessage
{
    /// global->track
    public sealed class GlobalPunishLadderEscapeOnWait : IProtocol
    {
        public const short MsgType = MessageType.MSG_GLOBAL_PUNISH_LADDER_ESCAPE_ON_WAIT;
        public short GetMsgType { get { return MsgType; } }
        public uint SceneId;// 战场ID
        public uint mapId;// 所在地图ID
        public uint Oid;// 玩家OID
        public string strUuid;// 玩家UUID
        public string sceneUuid;// 战场UUID
        
        public static void Send(uint sceneId, uint mapId, uint oid, string strUuid, string sceneUuid, object className)
        {
            var packet = new GlobalPunishLadderEscapeOnWait
            {
                SceneId = sceneId,
                mapId = mapId,
                Oid = oid,
                strUuid = strUuid,
                sceneUuid = sceneUuid
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            SceneId = reader.ReadUInt32();
            mapId = reader.ReadUInt32();
            Oid = reader.ReadUInt32();
            strUuid = reader.ReadString();
            sceneUuid = reader.ReadString();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(SceneId);
            writer.Write(mapId);
            writer.Write(Oid);
            writer.Write(strUuid);
            writer.Write(sceneUuid);
        }
    }
}
