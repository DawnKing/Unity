// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.GlobalMessage
{
    // 通知跨服同步坦克信息
    public sealed class GlobalSyncTankBrief : IProtocol
    {
        public const short MsgType = MessageType.MSG_GLOBAL_SYNC_TANK_BRIEF;
        public short GetMsgType { get { return MsgType; } }
        public uint Oid;// 角色OID
        public uint SceneId;// 战场ID
        public byte PairType;// 配对类型 enum PVP_PAIR_ROLE
        public uint RoomType;// 匹配的房间类型 enum ROOM_TYPE
        public uint PairId;// 匹配ID
        public uint SyncType;// 同步类型
        public TANK_BRIEF tankBrief;// 坦克简要信息
        
        public static void Send(uint oid, uint sceneId, byte pairType, uint roomType, uint pairId, uint syncType, TANK_BRIEF tankBrief, object className)
        {
            var packet = new GlobalSyncTankBrief
            {
                Oid = oid,
                SceneId = sceneId,
                PairType = pairType,
                RoomType = roomType,
                PairId = pairId,
                SyncType = syncType,
                tankBrief = tankBrief
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            Oid = reader.ReadUInt32();
            SceneId = reader.ReadUInt32();
            PairType = reader.ReadByte();
            RoomType = reader.ReadUInt32();
            PairId = reader.ReadUInt32();
            SyncType = reader.ReadUInt32();
            tankBrief = new TANK_BRIEF();
            tankBrief.ReadFromStream(reader);
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(Oid);
            writer.Write(SceneId);
            writer.Write(PairType);
            writer.Write(RoomType);
            writer.Write(PairId);
            writer.Write(SyncType);
            tankBrief.WriteToStream(writer);
        }
    }
}
