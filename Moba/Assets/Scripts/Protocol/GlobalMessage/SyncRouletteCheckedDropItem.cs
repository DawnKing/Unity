// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.GlobalMessage
{
    /// 同步本次roll到的物品给gate
    public sealed class SyncRouletteCheckedDropItem : IProtocol
    {
        public const short MsgType = MessageType.MSG_SYNC_ROULETTE_CHECKED_DROP_ITEM;
        public short GetMsgType { get { return MsgType; } }
        public uint Oid;// 角色OID
        public uint Type;// ROULETTE_TYPE
        public uint[] vecRollId;// ROLL到轮盘ID（包含限制掉落和非限制掉落的）
        public byte Batch;// 是否十连
        
        public static void Send(uint oid, uint type, uint[] vecRollId, byte batch, object className)
        {
            var packet = new SyncRouletteCheckedDropItem
            {
                Oid = oid,
                Type = type,
                vecRollId = vecRollId,
                Batch = batch
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            Oid = reader.ReadUInt32();
            Type = reader.ReadUInt32();
            var length3 = reader.ReadUInt16();
            vecRollId = new uint[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                vecRollId[i3] = reader.ReadUInt32();
            }
            Batch = reader.ReadByte();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(Oid);
            writer.Write(Type);
            ushort count3 = (ushort)(vecRollId == null ? 0 : vecRollId.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                writer.Write(vecRollId[i3]);
            }
            writer.Write(Batch);
        }
    }
}
