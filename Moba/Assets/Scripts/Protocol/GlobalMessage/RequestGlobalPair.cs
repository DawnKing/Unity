// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.GlobalMessage
{
    // ----------------------------------------------------------------------
    // MSGTYPE_DECLARE(MSG_GLOBAL_START_PAIR),
    // 开始跨服配对
    public sealed class RequestGlobalPair : IProtocol
    {
        public const short MsgType = MessageType.MSG_GLOBAL_START_PAIR;
        public short GetMsgType { get { return MsgType; } }
        public byte Type;// 配对类型 enum PVP_PAIR_ROLE
        public uint RoomType;// 匹配的房间类型 enum ROOM_TYPE
        public uint PairId;// 配对的id
        public int Elo;// 配对的战力
        public uint PairTime;// 开始匹配的时间戳（用于日志的匹配时长记录）
        public uint BattleMode;// 匹配模式
        public CHAR_BRIEF[] charVec;// 配对的角色列表
        public CHAR_TANK_BRIEF_CONT[] charTankVec;// 角色的坦克信息列表
        
        public static void Send(byte type, uint roomType, uint pairId, int elo, uint pairTime, uint battleMode, CHAR_BRIEF[] charVec, CHAR_TANK_BRIEF_CONT[] charTankVec, object className)
        {
            var packet = new RequestGlobalPair
            {
                Type = type,
                RoomType = roomType,
                PairId = pairId,
                Elo = elo,
                PairTime = pairTime,
                BattleMode = battleMode,
                charVec = charVec,
                charTankVec = charTankVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            Type = reader.ReadByte();
            RoomType = reader.ReadUInt32();
            PairId = reader.ReadUInt32();
            Elo = reader.ReadInt32();
            PairTime = reader.ReadUInt32();
            BattleMode = reader.ReadUInt32();
            var length7 = reader.ReadUInt16();
            charVec = new CHAR_BRIEF[length7];
            for (var i7 = 0; i7 < length7; i7++)
            {
                charVec[i7] = new CHAR_BRIEF();
                charVec[i7].ReadFromStream(reader);
            }
            var length8 = reader.ReadUInt16();
            charTankVec = new CHAR_TANK_BRIEF_CONT[length8];
            for (var i8 = 0; i8 < length8; i8++)
            {
                charTankVec[i8] = new CHAR_TANK_BRIEF_CONT();
                charTankVec[i8].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(Type);
            writer.Write(RoomType);
            writer.Write(PairId);
            writer.Write(Elo);
            writer.Write(PairTime);
            writer.Write(BattleMode);
            ushort count7 = (ushort)(charVec == null ? 0 : charVec.Length);
            writer.Write(count7);
            for(var i7 = 0; i7 < count7; i7++)
            {
                charVec[i7].WriteToStream(writer);
            }
            ushort count8 = (ushort)(charTankVec == null ? 0 : charTankVec.Length);
            writer.Write(count8);
            for(var i8 = 0; i8 < count8; i8++)
            {
                charTankVec[i8].WriteToStream(writer);
            }
        }
    }
}
