// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.StoreMessage
{
    // 商店相关的消息
    // MSGTYPE_DECLARE_ASSIGN(MSG_NOTIFY_STORE_MERCHANDISE, 1140),
    public sealed class NotifyStoreMerchandise : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_STORE_MERCHANDISE;
        public short GetMsgType { get { return MsgType; } }
        public ushort storeType;// 商店类型, 参见STORE_TYPE
        public uint lastUpdate;// 最后一次刷新时间
        public uint refreshCount;// 刷新次数
        public STORE_GOODS[] storeGoods;// 商城物品列表(模板ID，剩余数量，售价，货币种类)
        
        public static void Send(ushort storeType, uint lastUpdate, uint refreshCount, STORE_GOODS[] storeGoods, object className)
        {
            var packet = new NotifyStoreMerchandise
            {
                storeType = storeType,
                lastUpdate = lastUpdate,
                refreshCount = refreshCount,
                storeGoods = storeGoods
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            storeType = reader.ReadUInt16();
            lastUpdate = reader.ReadUInt32();
            refreshCount = reader.ReadUInt32();
            var length4 = reader.ReadUInt16();
            storeGoods = new STORE_GOODS[length4];
            for (var i4 = 0; i4 < length4; i4++)
            {
                storeGoods[i4] = new STORE_GOODS();
                storeGoods[i4].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(storeType);
            writer.Write(lastUpdate);
            writer.Write(refreshCount);
            ushort count4 = (ushort)(storeGoods == null ? 0 : storeGoods.Length);
            writer.Write(count4);
            for(var i4 = 0; i4 < count4; i4++)
            {
                storeGoods[i4].WriteToStream(writer);
            }
        }
    }
}
