// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.TeamMessage
{
    // 通知约战列表
    public sealed class NotifyChallengeList : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_CHALLENGE_LIST;
        public short GetMsgType { get { return MsgType; } }
        public ChallengeInfo[] list;
        
        public static void Send(ChallengeInfo[] list, object className)
        {
            var packet = new NotifyChallengeList
            {
                list = list
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            var length1 = reader.ReadUInt16();
            list = new ChallengeInfo[length1];
            for (var i1 = 0; i1 < length1; i1++)
            {
                list[i1] = new ChallengeInfo();
                list[i1].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            ushort count1 = (ushort)(list == null ? 0 : list.Length);
            writer.Write(count1);
            for(var i1 = 0; i1 < count1; i1++)
            {
                list[i1].WriteToStream(writer);
            }
        }
    }
}
