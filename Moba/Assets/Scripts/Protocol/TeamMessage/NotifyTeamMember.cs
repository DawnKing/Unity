// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.TeamMessage
{
    // 通知战队成员
    public sealed class NotifyTeamMember : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_TEAM_MEMBER;
        public short GetMsgType { get { return MsgType; } }
        public uint ContestId;// 对阵ID（联赛服需要传入）
        public uint GuildId;// 军团id
        public uint TeamId;// 战队id
        public MemberInfo[] memberVec;// 军团成员信息
        
        public static void Send(uint contestId, uint guildId, uint teamId, MemberInfo[] memberVec, object className)
        {
            var packet = new NotifyTeamMember
            {
                ContestId = contestId,
                GuildId = guildId,
                TeamId = teamId,
                memberVec = memberVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            ContestId = reader.ReadUInt32();
            GuildId = reader.ReadUInt32();
            TeamId = reader.ReadUInt32();
            var length4 = reader.ReadUInt16();
            memberVec = new MemberInfo[length4];
            for (var i4 = 0; i4 < length4; i4++)
            {
                memberVec[i4] = new MemberInfo();
                memberVec[i4].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(ContestId);
            writer.Write(GuildId);
            writer.Write(TeamId);
            ushort count4 = (ushort)(memberVec == null ? 0 : memberVec.Length);
            writer.Write(count4);
            for(var i4 = 0; i4 < count4; i4++)
            {
                memberVec[i4].WriteToStream(writer);
            }
        }
    }
}
