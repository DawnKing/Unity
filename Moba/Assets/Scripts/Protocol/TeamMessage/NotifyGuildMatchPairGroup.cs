// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.TeamMessage
{
    // 通知客户端军团赛对阵开始
    public sealed class NotifyGuildMatchPairGroup : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_GUILD_MATCH_PAIR_GROUP;
        public short GetMsgType { get { return MsgType; } }
        public uint Score;// 增加的积分
        public uint GuildIdRed;// 军团1的ID
        public string strGuildNameRed;// 军团1的名称
        public uint GuildIdBlue;// 军团2的ID
        public string strGuildNameBlue;// 军团2的名称
        public uint Result;// enum GUILD_MATCH_BATTLE_RESULT
        public GuildMatchTeamContest[] vecContest;
        public uint Turn;// 匹配轮次
        
        public static void Send(uint score, uint guildIdRed, string strGuildNameRed, uint guildIdBlue, string strGuildNameBlue, uint result, GuildMatchTeamContest[] vecContest, uint turn, object className)
        {
            var packet = new NotifyGuildMatchPairGroup
            {
                Score = score,
                GuildIdRed = guildIdRed,
                strGuildNameRed = strGuildNameRed,
                GuildIdBlue = guildIdBlue,
                strGuildNameBlue = strGuildNameBlue,
                Result = result,
                vecContest = vecContest,
                Turn = turn
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            Score = reader.ReadUInt32();
            GuildIdRed = reader.ReadUInt32();
            strGuildNameRed = reader.ReadString();
            GuildIdBlue = reader.ReadUInt32();
            strGuildNameBlue = reader.ReadString();
            Result = reader.ReadUInt32();
            var length7 = reader.ReadUInt16();
            vecContest = new GuildMatchTeamContest[length7];
            for (var i7 = 0; i7 < length7; i7++)
            {
                vecContest[i7] = new GuildMatchTeamContest();
                vecContest[i7].ReadFromStream(reader);
            }
            Turn = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(Score);
            writer.Write(GuildIdRed);
            writer.Write(strGuildNameRed);
            writer.Write(GuildIdBlue);
            writer.Write(strGuildNameBlue);
            writer.Write(Result);
            ushort count7 = (ushort)(vecContest == null ? 0 : vecContest.Length);
            writer.Write(count7);
            for(var i7 = 0; i7 < count7; i7++)
            {
                vecContest[i7].WriteToStream(writer);
            }
            writer.Write(Turn);
        }
    }
}
