// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.TeamMessage
{
    // 无
    // 战斗结束
    // 比赛结束
    // 进入房间
    // 接受挑战
    // 开始战斗
    // 开始配对
    // 通知战队赛信息
    public sealed class NotifyTeamMatchInfo : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_TEAM_MATCH_INFO;
        public short GetMsgType { get { return MsgType; } }
        public TeamBrief cgTeamBrief;// 挑战方战队信息
        public TeamBrief beCgTeamBrief;// 被挑战方战队信息
        public byte CgStart;// 挑战方是否开始
        public byte BeCgStart;// 被挑战方是否开始
        public byte cgWin;// 挑战方胜利次数
        public byte beCgWin;// 被挑战方胜利次数
        public byte State;// 状态 enum TEAM_MATCH_MATCH_STATE
        public uint StartTime;// 下一场战斗开始时间
        public byte roomType;// 房间类型 enum ROOM_TYPE
        public byte notifyType;// 通知类型 enum MATCH_INFO_TYPE
        public byte isPariPolicy;// 是否是匹配模式
        
        public static void Send(TeamBrief cgTeamBrief, TeamBrief beCgTeamBrief, byte cgStart, byte beCgStart, byte cgWin, byte beCgWin, byte state, uint startTime, byte roomType, byte notifyType, byte isPariPolicy, object className)
        {
            var packet = new NotifyTeamMatchInfo
            {
                cgTeamBrief = cgTeamBrief,
                beCgTeamBrief = beCgTeamBrief,
                CgStart = cgStart,
                BeCgStart = beCgStart,
                cgWin = cgWin,
                beCgWin = beCgWin,
                State = state,
                StartTime = startTime,
                roomType = roomType,
                notifyType = notifyType,
                isPariPolicy = isPariPolicy
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            cgTeamBrief = new TeamBrief();
            cgTeamBrief.ReadFromStream(reader);
            beCgTeamBrief = new TeamBrief();
            beCgTeamBrief.ReadFromStream(reader);
            CgStart = reader.ReadByte();
            BeCgStart = reader.ReadByte();
            cgWin = reader.ReadByte();
            beCgWin = reader.ReadByte();
            State = reader.ReadByte();
            StartTime = reader.ReadUInt32();
            roomType = reader.ReadByte();
            notifyType = reader.ReadByte();
            isPariPolicy = reader.ReadByte();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            cgTeamBrief.WriteToStream(writer);
            beCgTeamBrief.WriteToStream(writer);
            writer.Write(CgStart);
            writer.Write(BeCgStart);
            writer.Write(cgWin);
            writer.Write(beCgWin);
            writer.Write(State);
            writer.Write(StartTime);
            writer.Write(roomType);
            writer.Write(notifyType);
            writer.Write(isPariPolicy);
        }
    }
}
