// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.TeamMessage
{
    // 通知战队赛结果
    public sealed class NotifyTeamMatchResult : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_TEAM_MATCH_RESULT;
        public short GetMsgType { get { return MsgType; } }
        public TeamBrief cgTeamBrief;// 挑战方战队信息
        public TeamBrief beCgTeamBrief;// 被挑战方战队信息
        public uint WinTeamId;// 胜利战队id
        public uint RoomType;// ROOM_TYPE的排位赛和联赛的枚举
        
        public static void Send(TeamBrief cgTeamBrief, TeamBrief beCgTeamBrief, uint winTeamId, uint roomType, object className)
        {
            var packet = new NotifyTeamMatchResult
            {
                cgTeamBrief = cgTeamBrief,
                beCgTeamBrief = beCgTeamBrief,
                WinTeamId = winTeamId,
                RoomType = roomType
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            cgTeamBrief = new TeamBrief();
            cgTeamBrief.ReadFromStream(reader);
            beCgTeamBrief = new TeamBrief();
            beCgTeamBrief.ReadFromStream(reader);
            WinTeamId = reader.ReadUInt32();
            RoomType = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            cgTeamBrief.WriteToStream(writer);
            beCgTeamBrief.WriteToStream(writer);
            writer.Write(WinTeamId);
            writer.Write(RoomType);
        }
    }
}
