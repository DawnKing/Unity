// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.TeamMessage
{
    // MSGTYPE_DECLARE(MSG_NOTIFY_GUILD_BOSS_BATTLE_END),
    // 通知军团BOSS战斗结束
    public sealed class NotifyGuildBossBattleEndMessage : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_GUILD_BOSS_BATTLE_END;
        public short GetMsgType { get { return MsgType; } }
        public string charUuid;// 玩家UUID
        public uint bossId;// BOSS模板ID
        public int bossDmgHp;// BOSS本次损失血量
        public uint isDead;// BOSS是否已死亡
        
        public static void Send(string charUuid, uint bossId, int bossDmgHp, uint isDead, object className)
        {
            var packet = new NotifyGuildBossBattleEndMessage
            {
                charUuid = charUuid,
                bossId = bossId,
                bossDmgHp = bossDmgHp,
                isDead = isDead
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            charUuid = reader.ReadString();
            bossId = reader.ReadUInt32();
            bossDmgHp = reader.ReadInt32();
            isDead = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(charUuid);
            writer.Write(bossId);
            writer.Write(bossDmgHp);
            writer.Write(isDead);
        }
    }
}
