// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.TeamMessage
{
    // guild->global
    public sealed class GuildRequestCreateScene : IProtocol
    {
        public const short MsgType = MessageType.MSG_GUILD_REQUEST_CREATE_SCENE;
        public short GetMsgType { get { return MsgType; } }
        public uint RoomType;// 房间类型
        public uint MapId;// 地图ID
        public uint RedTeamId;// 红方战队ID
        public uint RedTeamTrackId;// 红方战队所在的track
        public uint RedRoomId;// 红方房间ID
        public uint BlueTeamId;// 蓝方战队ID
        public uint BlueTeamTrackId;// 蓝方战队所在的track
        public uint BlueRoomId;// 蓝方房间ID
        public string strSceneName;// 战场名称
        public uint DefaultWinCamp;// 平局的胜利阵营
        public uint GuildSvrId;// GUILDSVR的SID
        public uint ActSvrId;// ActSvr的SID
        
        public static void Send(uint roomType, uint mapId, uint redTeamId, uint redTeamTrackId, uint redRoomId, uint blueTeamId, uint blueTeamTrackId, uint blueRoomId, string strSceneName, uint defaultWinCamp, uint guildSvrId, uint actSvrId, object className)
        {
            var packet = new GuildRequestCreateScene
            {
                RoomType = roomType,
                MapId = mapId,
                RedTeamId = redTeamId,
                RedTeamTrackId = redTeamTrackId,
                RedRoomId = redRoomId,
                BlueTeamId = blueTeamId,
                BlueTeamTrackId = blueTeamTrackId,
                BlueRoomId = blueRoomId,
                strSceneName = strSceneName,
                DefaultWinCamp = defaultWinCamp,
                GuildSvrId = guildSvrId,
                ActSvrId = actSvrId
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            RoomType = reader.ReadUInt32();
            MapId = reader.ReadUInt32();
            RedTeamId = reader.ReadUInt32();
            RedTeamTrackId = reader.ReadUInt32();
            RedRoomId = reader.ReadUInt32();
            BlueTeamId = reader.ReadUInt32();
            BlueTeamTrackId = reader.ReadUInt32();
            BlueRoomId = reader.ReadUInt32();
            strSceneName = reader.ReadString();
            DefaultWinCamp = reader.ReadUInt32();
            GuildSvrId = reader.ReadUInt32();
            ActSvrId = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(RoomType);
            writer.Write(MapId);
            writer.Write(RedTeamId);
            writer.Write(RedTeamTrackId);
            writer.Write(RedRoomId);
            writer.Write(BlueTeamId);
            writer.Write(BlueTeamTrackId);
            writer.Write(BlueRoomId);
            writer.Write(strSceneName);
            writer.Write(DefaultWinCamp);
            writer.Write(GuildSvrId);
            writer.Write(ActSvrId);
        }
    }
}
