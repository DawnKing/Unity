// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.ShareTypes;
namespace GameProtocol.TeamMessage
{
    // MSGTYPE_DECLARE(MSG_NOTIFY_GUILD_APPLY_LIST),
    // 通知军团申请数据
    public sealed class NotifyApplyList : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_GUILD_APPLY_LIST;
        public short GetMsgType { get { return MsgType; } }
        public BUDDY_BRIEF[] charVec;// 申请加入的角色信息
        public GuildInviteInfo[] inviteVec;// 推荐人信息
        
        public static void Send(BUDDY_BRIEF[] charVec, GuildInviteInfo[] inviteVec, object className)
        {
            var packet = new NotifyApplyList
            {
                charVec = charVec,
                inviteVec = inviteVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            var length1 = reader.ReadUInt16();
            charVec = new BUDDY_BRIEF[length1];
            for (var i1 = 0; i1 < length1; i1++)
            {
                charVec[i1] = new BUDDY_BRIEF();
                charVec[i1].ReadFromStream(reader);
            }
            var length2 = reader.ReadUInt16();
            inviteVec = new GuildInviteInfo[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                inviteVec[i2] = new GuildInviteInfo();
                inviteVec[i2].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            ushort count1 = (ushort)(charVec == null ? 0 : charVec.Length);
            writer.Write(count1);
            for(var i1 = 0; i1 < count1; i1++)
            {
                charVec[i1].WriteToStream(writer);
            }
            ushort count2 = (ushort)(inviteVec == null ? 0 : inviteVec.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                inviteVec[i2].WriteToStream(writer);
            }
        }
    }
}
