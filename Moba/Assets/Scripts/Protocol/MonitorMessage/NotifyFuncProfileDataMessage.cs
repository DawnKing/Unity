// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.MonitorMessage
{
    /// MSGTYPE_DECLARE(MSG_NOTIFY_FUNC_PROFILE_DATA),
    /// 返回服务器返回网络性能分析数据
    public sealed class NotifyFuncProfileDataMessage : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_FUNC_PROFILE_DATA;
        public short GetMsgType { get { return MsgType; } }
        public uint serverUid;// 服务器进程标识
        public string serverName;// 服务器名
        public FuncProfileData[] funcProfileDataVec;// 服务器性能分析数据
        
        public static void Send(uint serverUid, string serverName, FuncProfileData[] funcProfileDataVec, object className)
        {
            var packet = new NotifyFuncProfileDataMessage
            {
                serverUid = serverUid,
                serverName = serverName,
                funcProfileDataVec = funcProfileDataVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            serverUid = reader.ReadUInt32();
            serverName = reader.ReadString();
            var length3 = reader.ReadUInt16();
            funcProfileDataVec = new FuncProfileData[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                funcProfileDataVec[i3] = new FuncProfileData();
                funcProfileDataVec[i3].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(serverUid);
            writer.Write(serverName);
            ushort count3 = (ushort)(funcProfileDataVec == null ? 0 : funcProfileDataVec.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                funcProfileDataVec[i3].WriteToStream(writer);
            }
        }
    }
}
