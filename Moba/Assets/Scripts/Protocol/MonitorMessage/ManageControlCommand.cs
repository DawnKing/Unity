// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.MonitorMessage
{
    // 启动
    // 停止
    // 重启
    // 刷新
    // 心跳
    // 启动
    // 特定子对象
    // 全部子对象
    /// MSGTYPE_DECLARE(MSG_MANAGE_CONTROLCMD),
    /// 管理消息，控制命令
    public sealed class ManageControlCommand : IProtocol
    {
        public const short MsgType = MessageType.MSG_MANAGE_CONTROLCMD;
        public short GetMsgType { get { return MsgType; } }
        public int objType;// 被管对象类型的类型
        public int Command;// 控制命令
        public int Scope;// 控制范围
        public uint Target;// 目标对象类型
        
        public static void Send(int objType, int command, int scope, uint target, object className)
        {
            var packet = new ManageControlCommand
            {
                objType = objType,
                Command = command,
                Scope = scope,
                Target = target
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            objType = reader.ReadInt32();
            Command = reader.ReadInt32();
            Scope = reader.ReadInt32();
            Target = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(objType);
            writer.Write(Command);
            writer.Write(Scope);
            writer.Write(Target);
        }
    }
}
