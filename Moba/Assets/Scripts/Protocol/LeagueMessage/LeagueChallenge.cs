// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.LeagueMessage
{
    // ----------------------------------------------------------------------
    /// @file			protocol/CurrencyMessage.h
    /// @brief
    /// @author         Bob Lee (bob@onwind.cn)
    /// @copyright		Sixcube Information Technology Co,. Ltd. (2012)
    /// @date			2007-08-22 13:42:03
    // -----------------------------------------------------------------------
    /*
     * 赛事报名返回的错误代码
     */
    // 无此赛事阶段
    // 无此战队
    // 赛事报名未开放
    // 赛事报名已关闭
    // 赛事报名已达上限
    // 战队达不到报名条件-等级不足
    // 战队达不到报名条件-荣耀不足
    // 战队达不到报名条件-排位赛名次不足
    // 战队达不到报名条件-成员数量不足
    // 战队达不到报名条件-创建时间过晚
    // 战队达不到报名条件-战队资金不足
    // 战队已经报过名了
    // 没有找到对应的阵区
    public sealed class LeagueChallenge
    {
        public uint nOrder;// 队伍名词
        public uint nContest;// 对阵ID
        public uint nTeamId;//队伍ID
        public uint nTurn;// 队伍ID
        public uint nStartTime;// 小组名次
        public uint nTodayLeft;// 今日剩余战队次数
        public uint nTodayTimes;// 今日已经战斗次数
        public uint nDayMax;// 今日最大战斗次数
        public uint nScores;// 当前分数
        public uint nCluster;// 所在区服
        public string szTeamName;// 战队名称
        public uint nPlace;// 战队赛名次
        public uint nGlory;// 荣耀值
        public uint nState;// 挑战状态(4-已经挑战过；6-次数已满；8-自身战队)
        public void ReadFromStream(BinaryReader reader)
        {
            nOrder = reader.ReadUInt32();
            nContest = reader.ReadUInt32();
            nTeamId = reader.ReadUInt32();
            nTurn = reader.ReadUInt32();
            nStartTime = reader.ReadUInt32();
            nTodayLeft = reader.ReadUInt32();
            nTodayTimes = reader.ReadUInt32();
            nDayMax = reader.ReadUInt32();
            nScores = reader.ReadUInt32();
            nCluster = reader.ReadUInt32();
            szTeamName = reader.ReadString();
            nPlace = reader.ReadUInt32();
            nGlory = reader.ReadUInt32();
            nState = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(nOrder);
            writer.Write(nContest);
            writer.Write(nTeamId);
            writer.Write(nTurn);
            writer.Write(nStartTime);
            writer.Write(nTodayLeft);
            writer.Write(nTodayTimes);
            writer.Write(nDayMax);
            writer.Write(nScores);
            writer.Write(nCluster);
            writer.Write(szTeamName);
            writer.Write(nPlace);
            writer.Write(nGlory);
            writer.Write(nState);
        }
    }
}
