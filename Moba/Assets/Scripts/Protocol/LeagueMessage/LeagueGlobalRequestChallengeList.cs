// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.LeagueMessage
{
    // MSGTYPE_DECLARE(MSG_GLOBAL_LEAGUE_CHALLENGE_REQ),
    // 联赛请求挑战列表Track->Global
    public sealed class LeagueGlobalRequestChallengeList : IProtocol
    {
        public const short MsgType = MessageType.MSG_GLOBAL_LEAGUE_CHALLENGE_REQ;
        public short GetMsgType { get { return MsgType; } }
        public uint Contest;// 联赛对阵
        public uint Cluster;// 请求的大区
        public uint Team;// 所在的队伍
        public uint AcctOid;// 请求的玩家
        
        public static void Send(uint contest, uint cluster, uint team, uint acctOid, object className)
        {
            var packet = new LeagueGlobalRequestChallengeList
            {
                Contest = contest,
                Cluster = cluster,
                Team = team,
                AcctOid = acctOid
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            Contest = reader.ReadUInt32();
            Cluster = reader.ReadUInt32();
            Team = reader.ReadUInt32();
            AcctOid = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(Contest);
            writer.Write(Cluster);
            writer.Write(Team);
            writer.Write(AcctOid);
        }
    }
}
