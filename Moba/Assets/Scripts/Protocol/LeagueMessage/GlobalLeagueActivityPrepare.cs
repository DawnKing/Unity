// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.LeagueMessage
{
    // MSGTYPE_DECLARE(MSG_GLOBAL_LEAGUE_ACT_PREPARE),
    // 联赛活动开始前的准备Track->Global
    public sealed class GlobalLeagueActivityPrepare : IProtocol
    {
        public const short MsgType = MessageType.MSG_GLOBAL_LEAGUE_ACT_PREPARE;
        public short GetMsgType { get { return MsgType; } }
        public uint Cluster;// 所在区服
        public uint StartTime;// 活动开始时间
        public uint ActTplId;// 活动模板id
        
        public static void Send(uint cluster, uint startTime, uint actTplId, object className)
        {
            var packet = new GlobalLeagueActivityPrepare
            {
                Cluster = cluster,
                StartTime = startTime,
                ActTplId = actTplId
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            Cluster = reader.ReadUInt32();
            StartTime = reader.ReadUInt32();
            ActTplId = reader.ReadUInt32();
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(Cluster);
            writer.Write(StartTime);
            writer.Write(ActTplId);
        }
    }
}
