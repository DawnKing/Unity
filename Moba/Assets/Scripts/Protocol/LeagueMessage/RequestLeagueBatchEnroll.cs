// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.LeagueMessage
{
    /// 请求批量报名联赛
    public sealed class RequestLeagueBatchEnroll : IProtocol
    {
        public const short MsgType = MessageType.MSG_REQUEST_LEAGUE_BATCH_ENROLL;
        public short GetMsgType { get { return MsgType; } }
        public uint session;// 赛事实例
        public uint zone_id;// 分区
        public uint[] vecTeamId;// 要报名的战队ID
        
        public static void Send(uint session, uint zone_id, uint[] vecTeamId, object className)
        {
            var packet = new RequestLeagueBatchEnroll
            {
                session = session,
                zone_id = zone_id,
                vecTeamId = vecTeamId
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            session = reader.ReadUInt32();
            zone_id = reader.ReadUInt32();
            var length3 = reader.ReadUInt16();
            vecTeamId = new uint[length3];
            for (var i3 = 0; i3 < length3; i3++)
            {
                vecTeamId[i3] = reader.ReadUInt32();
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(session);
            writer.Write(zone_id);
            ushort count3 = (ushort)(vecTeamId == null ? 0 : vecTeamId.Length);
            writer.Write(count3);
            for(var i3 = 0; i3 < count3; i3++)
            {
                writer.Write(vecTeamId[i3]);
            }
        }
    }
}
