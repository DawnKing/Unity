// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

using GameProtocol.BulkDataType;
namespace GameProtocol.LeagueMessage
{
    // MSGTYPE_DECLARE(MSG_GLOBAL_LEAGUE_MEMEBER_AWARD),
    // 联赛奖励领取Global->Track
    public sealed class GlobalLeagueMemberAward : IProtocol
    {
        public const short MsgType = MessageType.MSG_GLOBAL_LEAGUE_MEMEBER_AWARD;
        public short GetMsgType { get { return MsgType; } }
        public int Ret;// 奖励结果（<0 数据库错误；0：成功；1-奖励不存在；2-奖励已经领取）
        public uint AwardId;// 领取到的奖励
        public uint TeamId;// 所在的战队
        public uint AcctOid;// 角色的唯一ID
        public LEAGUE_PRIZE prize;// 奖励细节
        
        public static void Send(int ret, uint awardId, uint teamId, uint acctOid, LEAGUE_PRIZE prize, object className)
        {
            var packet = new GlobalLeagueMemberAward
            {
                Ret = ret,
                AwardId = awardId,
                TeamId = teamId,
                AcctOid = acctOid,
                prize = prize
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            Ret = reader.ReadInt32();
            AwardId = reader.ReadUInt32();
            TeamId = reader.ReadUInt32();
            AcctOid = reader.ReadUInt32();
            prize = new LEAGUE_PRIZE();
            prize.ReadFromStream(reader);
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(Ret);
            writer.Write(AwardId);
            writer.Write(TeamId);
            writer.Write(AcctOid);
            prize.WriteToStream(writer);
        }
    }
}
