// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.ActivityMessage
{
    // MSGTYPE_DECLARE(MSG_NOTIFY_LUCK_CONVERT_COUNT),
    // 通知幸运活动兑换次数
    public sealed class NotifyLuckConvertCountMessage : IProtocol
    {
        public const short MsgType = MessageType.MSG_NOTIFY_LUCK_CONVERT_COUNT;
        public short GetMsgType { get { return MsgType; } }
        public uint actType;//活动类型
        public ActConvertInfo[] convertInfoVec;//兑换信息
        
        public static void Send(uint actType, ActConvertInfo[] convertInfoVec, object className)
        {
            var packet = new NotifyLuckConvertCountMessage
            {
                actType = actType,
                convertInfoVec = convertInfoVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            actType = reader.ReadUInt32();
            var length2 = reader.ReadUInt16();
            convertInfoVec = new ActConvertInfo[length2];
            for (var i2 = 0; i2 < length2; i2++)
            {
                convertInfoVec[i2] = new ActConvertInfo();
                convertInfoVec[i2].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(actType);
            ushort count2 = (ushort)(convertInfoVec == null ? 0 : convertInfoVec.Length);
            writer.Write(count2);
            for(var i2 = 0; i2 < count2; i2++)
            {
                convertInfoVec[i2].WriteToStream(writer);
            }
        }
    }
}
