// Generated by proto_to_csharp.py. DO NOT EDIT!
using System.IO;

namespace GameProtocol.ActivityMessage
{
    // MSGTYPE_DECLARE(MSG_ACTIVITY_NOTIFY_BOSS_DATA),
    // 通知客户端, 世界boss活动信息
    public sealed class ActivityNotifyBossData : IProtocol
    {
        public const short MsgType = MessageType.MSG_ACTIVITY_NOTIFY_BOSS_DATA;
        public short GetMsgType { get { return MsgType; } }
        public int ActId;// 活动模板id
        public int BossHp;// boss当前血量
        public int BossMaxHp;// boss最大血量
        public int Harm;// 自己对boss造成的伤害
        public uint Rank;// 自己的名次
        public uint EnterCD;// 进入地图冷却时间
        public HarmBossInfo[] rankVec;// 伤害前10名的信息
        
        public static void Send(int actId, int bossHp, int bossMaxHp, int harm, uint rank, uint enterCD, HarmBossInfo[] rankVec, object className)
        {
            var packet = new ActivityNotifyBossData
            {
                ActId = actId,
                BossHp = bossHp,
                BossMaxHp = bossMaxHp,
                Harm = harm,
                Rank = rank,
                EnterCD = enterCD,
                rankVec = rankVec
            };
            NetMessage.Send(packet.BuildPacket(), className);
        }
        
        public byte[] BuildPacket()
        {
            var buffer = ProtocolBuffer.Writer;
            buffer.Write(MsgType);
            buffer.Write(ProtocolBuffer.Zero);
            WriteToStream(buffer);
            return ProtocolBuffer.CacheStream.ToArray();
        }
        
        public void ReadFromStream(BinaryReader reader)
        {
            ActId = reader.ReadInt32();
            BossHp = reader.ReadInt32();
            BossMaxHp = reader.ReadInt32();
            Harm = reader.ReadInt32();
            Rank = reader.ReadUInt32();
            EnterCD = reader.ReadUInt32();
            var length7 = reader.ReadUInt16();
            rankVec = new HarmBossInfo[length7];
            for (var i7 = 0; i7 < length7; i7++)
            {
                rankVec[i7] = new HarmBossInfo();
                rankVec[i7].ReadFromStream(reader);
            }
        }
        
        public void WriteToStream(BinaryWriter writer)
        {
            writer.Write(ActId);
            writer.Write(BossHp);
            writer.Write(BossMaxHp);
            writer.Write(Harm);
            writer.Write(Rank);
            writer.Write(EnterCD);
            ushort count7 = (ushort)(rankVec == null ? 0 : rankVec.Length);
            writer.Write(count7);
            for(var i7 = 0; i7 < count7; i7++)
            {
                rankVec[i7].WriteToStream(writer);
            }
        }
    }
}
