#!/usr/bin/python2.7
# coding: utf-8

__author__ = 'caijingxiao'

import os
import sys
import glob
from xml.dom.minidom import parse
import re

#类型定义，"定义文件中的类型":["ActionScript3中的类型"]
g_type_dict = {"string": ["string"],
               "uint": ["uint"],
               "bool": ["Boolean"],
               "byte": ["uint"],
               "int": ["int"],
               "float": ["float"],
               "uint64": ["uint64"],
               "int64": ["int64"]}

#类型默认值, "ActionScript中的类型":["ActionScript3中的类型的默认值"]
g_type_default = {"string": ['""'],
                  "uint": ["0"],
                  "int": ["0"],
                  "float": ["0"],
                  "List<int>":["null"],
                  "List<float>":["null"],
                  "List<string>":["null"]}

# 字符串转换
g_type_conver = {"int": ["int.Parse"],
                 "uint": ["uint.Parse"]}

#TemplateList定义
TEMPLATE_LIST_BEGIN = """// Generated by template.py. DO NOT EDIT!
using System;
using System.Collections.Generic;
using System.Xml;
"""

TEMPLATE_LIST_END = """"""

TEMPLATE_LIST_BEGIN2 = """
public sealed class TemplateList
{
\tpublic List<string> XMLList = new List<string>() {"""

TEMPLATE_LIST_END2 = """
\t};
"""

TEMPLATE_LIST_BEGIN3 = """
\tpublic List<Action<XmlNode>>  FunctionList = new List<Action<XmlNode>>() {"""

TEMPLATE_LIST_END3 = """
\t};
}
"""

#TemplateStruct定义
TEMPLATE_STRUCT_BEGIN = """// Generated by template.py. DO NOT EDIT!
using System.Collections.Generic;
using System.Xml;
%s
public sealed class %s
{
"""

TEMPLATE_STRUCT_END = """"""

#TemplateData定义
TEMPLATE_DATA_BEGIN = """

public sealed class %sData
{
\tpublic static Dictionary<%s, %s> Data = new Dictionary<%s, %s>();

\tpublic static void Init(XmlNode xml)
\t{
\t\tforeach (XmlElement element in xml.ChildNodes)
\t\t{
\t\t\t%s template = new %s();
"""

TEMPLATE_INIT_END = """\t\t}\n\t}\n"""

TEMPLATE_DATA_END = """}"""

#获取getData()定义 className为null不用输出错误，用于特殊情况，如检查模板表数据为空时表示不处理
TEMPLATE_GET_DATA_BEGIN1 = """
\tpublic static %s GetData(%s, object className)
\t{%s
\t\tif (!Data.ContainsKey(Id) && className != null)
\t\t{
\t\t\tUnityEngine.Debug.LogError(string.Format("%s is null, Id = {0} @ {1}", %s, className));
\t\t\treturn null;
\t\t}
\t\t%s template = Data[%s];
\t\treturn template;
\t}
"""

TEMPLATE_GET_DATA_BEGIN2 = """
\tpublic static List<%s> GetData(%s, object className)
\t{
\t\tList<%s> templateList = data.getValue(%s) as List<%s>;
\t\tif (templateList == null && className != null)
\t\t{
\t\t\tLog.error("%s is null, "+%s, className);
\t\t\treturn null;
\t\t}
\t\treturn templateList;
\t}
"""

TEMPLATE_GET_DATA_END = """\t\t}"""

#获取getField()定义
TEMPLATE_GET_FIELD_DATA_BEGIN = """
\t/**
\t* %s
\t*/
\tpublic static %s Get_%s(%s, object className)
\t{%s
\t\t%s template = data.getValue(%s) as %s;
\t\tif (template == null)
\t\t\treturn %s;
\t\treturn template.%s;
\t}
"""

TEMPLATE_GET_FIELD_DATA_END = """\t\t}"""

#获取getTemplateByField()定义
TEMPLATE_GET_TEMPLATE_BY_FIELD_BEGIN1 = """
\tpublic static List<%s> GetTemplateBy_%s(%s, object className)
\t{
\t\tvar list:Array = data.values();
\t\tvar result:List<%s> = new List<%s>;
\t\tfor each(var template:%s in list)
\t\t\tif (template.%s == %s)
\t\t\t\tresult.push(template);
\t\treturn result;
\t}
"""

TEMPLATE_GET_TEMPLATE_BY_FIELD_BEGIN2 = """
\tpublic static List<%s> GetTemplateBy_%s(id:int, %s, object className)
\t{
\t\tvar list:List<%s> = GetData(id, className);
\t\tvar result:List<%s> = new List<%s>;
\t\tfor each(var template:%s in list)
\t\t\tif (template.%s == %s)
\t\t\t\tresult.push(template);
\t\treturn result;
\t}
"""

TEMPLATE_GET_TEMPLATE_BY_FIELD_END = """\t\t}"""

#TempalteData.Init()
TEMPLATE_DATA_PUT1 = """
\t\t\tData.Add(template.%s, template);
"""

TEMPLATE_DATA_PUT2 = """
\t\t\tdata.put(template.%s.toString().concat(%s), template);
"""

TEMPLATE_DATA_PUT3 = """
\t\t\tvar list:List<%s> = Data.getValue(%s) as List<%s>;
\t\t\tif (list == null)
\t\t\t{
\t\t\t\tlist = new List<%s>;
\t\t\t\tdata.put(%s, list);
\t\t\t}
\t\t\tlist.push(template);
"""

MULTI_KEY = ".toString().concat(%s)"
MULTI_KEY_PARAM1 = "'_'+%s+"
MULTI_KEY_PARAM2 = "'_'+template.%s+"


# C#模板转换
class CSharpConverter:
    def __init__(self):
        self.xml_dom_list = list()      # XML DOM列表
        self.dom_file_dict = dict()     # XML DOM对应的文件。key：XML DOM; value：xml file
        self.key_type = ""
        self.key_list = dict()          # 主键列表，值包含字段名和字段类型 key: index; value:(filed_name, filed_type)
        self.get_field_data = ""
        self.key_add = ""
        self.import_file = ""

    def parser_xml(self, xml_file):
        print "Parse file %s." % xml_file
        xml_dom = parse(xml_file)
        self.xml_dom_list.append(xml_dom)
        self.dom_file_dict[xml_dom] = xml_file

    # 解析字段信息
    def _parse_field_info(self, xml_dom, field_info_list):
        for child in xml_dom.childNodes:
            if child.nodeName != "field":
                continue
            attrs = child.attributes

            filed_name = attrs["field"].value
            field_type = attrs["type"].value
            field_comment = attrs["comment"].value

            field_type = g_type_dict[field_type][0]

            field_function = ""
            if attrs.has_key("function"):
                field_function = attrs["function"].value

            if attrs.has_key("multiString"):
                if attrs["multiString"].value == "string":
                    field_type = "List<string>"
                elif attrs["multiString"].value == "int":
                    field_type = "List<int>"
                elif attrs["multiString"].value == "float":
                    field_type = "List<float>"

            field_info_list.append((filed_name, field_type, field_comment, field_function))

            if attrs.has_key("key"):
                if attrs["key"].value == "list":
                    self.key_type = "list"
                    # key从1开始
                    self.key_list[len(self.key_list)+1] = (filed_name, field_type)
                elif attrs["key"].value.isdigit():
                    self.key_list[int(attrs["key"].value)] = (filed_name, field_type)
                elif attrs["key"].value == "add":
                    self.key_type = "add"
                    self.key_add = "\n\t\t\t" + attrs["key_add"].value
                    

    #------------------------TemplateStruct------------------------
    # 构造单个ActionScript3模板结构
    def _generate_template_struct(self, xml_dom, template_struct_file, field_info_list):
        # 自定义导入包
        importStr = "";
        importList = self.import_file.split(';')
        for fileStr in importList:
            if fileStr != "":
                importStr += fileStr + ";\n\t"

        template_struct_file.write(TEMPLATE_STRUCT_BEGIN % (importStr, xml_dom.nodeName))

        for (fieldName, fieldType, fieldComment, fieldFunction) in field_info_list:
            str_code = "\tpublic %s %s;\t//%s\n" % (fieldType, fieldName, fieldComment)
            template_struct_file.write(str_code.encode("utf-8"))
        template_struct_file.write("}\n")

    # 构造单个模板结构文件
    def _generate_template_struct_file(self, xml_dom, template_struct_file, xml_file=""):
        field_info_list = list()
        self._parse_field_info(xml_dom, field_info_list)
        self._generate_template_struct(xml_dom, template_struct_file, field_info_list)

        template_struct_file.write(TEMPLATE_STRUCT_END)
        print "Generated ActionScript TemplateStruct %s." % xml_file

    #------------------------TemplateData------------------------
    # 构造getData()方法
    def _generate_template_data_get(self, template_name, template_data_file):
        # 生成函数 public static AvatarTemplate getData(uint nId, object className)
        # 参数 uint nId
        param = self.key_list[1][1] + " " + self.key_list[1][0] 
        # 关键字 nId
        key = self.key_list[1][0]
        # 日志 Log.error("AvatarTemplate is null, "+"nId="+nId, className);
        log = '"'+self.key_list[1][0]+'="+'+self.key_list[1][0]
        # 根据关键字类型进行处理
        length = len(self.key_list)
        if length > 1:
            key_str = MULTI_KEY_PARAM1 * (length-1)
            key_str = key_str[:-1]    # 去掉最后一个"+"
            for k in self.key_list.keys()[1:]:
                param = param + " ," + self.key_list[k][0] + ":" + self.key_list[k][1]
                key_str = key_str.replace("%s", self.key_list[k][0], 1)
                log = log + '+", ' + self.key_list[k][0] + '="+' + self.key_list[k][0]
            key += MULTI_KEY % key_str.encode()
              
        if self.key_type == "list":
            template_data_file.write(TEMPLATE_GET_DATA_BEGIN2 %
                                    (template_name, param, template_name,
                                     key, template_name, template_name, log))
        else:
            if self.key_type == "add":
                key_add = self.key_add
            else:
                key_add = ""
            template_data_file.write(TEMPLATE_GET_DATA_BEGIN1 %
                                    (template_name, param, key_add, template_name,
                                     log, template_name, key))

    # 构造getFieldData()方法
    def _generate_template_data_get_field(self, template_name, field_name, field_type, field_comment):
        param = self.key_list[1][0]+":"+self.key_list[1][1]
        key = self.key_list[1][0]
        length = len(self.key_list)
        
        if length > 1:
            key_str = MULTI_KEY_PARAM1 * (length-1)
            key_str = key_str[:-1]    # 去掉最后一个"+"
            for k in self.key_list.keys()[1:]:
                param = param+" ,"+self.key_list[k][0]+":"+self.key_list[k][1]
                key_str = key_str.replace("%s", self.key_list[k][0], 1)
            key += MULTI_KEY % key_str
            
        if self.key_type == "add":
            key_add = self.key_add
        else:
            key_add = ""
            
        self.get_field_data += \
            TEMPLATE_GET_FIELD_DATA_BEGIN % \
            (field_comment, field_name,  param, field_type,
             key_add, template_name, key, template_name,
             g_type_default[field_type][0], field_name)

    # 构造getTemplateByField()方法
    def _generate_template_data_get_template(self, template_name, field_name, field_type):
        if self.key_type == "list":
            self.get_field_data += \
                TEMPLATE_GET_TEMPLATE_BY_FIELD_BEGIN2 % \
                (field_name, field_name+":"+field_type, template_name,
                 template_name, template_name, template_name,
                 template_name, field_name, field_name)
        else:
            self.get_field_data += \
                TEMPLATE_GET_TEMPLATE_BY_FIELD_BEGIN1 % \
                (field_name, field_name+":"+field_type,
                 template_name, template_name, template_name,
                 template_name, field_name, field_name)

    # 构造单个TemplateData数据定义
    def _generate_template_data(self, xml_dom, template_data_file, field_info_list):
        template_name = xml_dom.nodeName
        
        #-------------init()方法, put---------------
        key = ""
        key_get_type = "string"

        if len(self.key_list) == 0:
            put_data = TEMPLATE_DATA_PUT1 % (field_info_list[0][0])
            self.key_list[1] = (field_info_list[0][0], field_info_list[0][1])
            key = "template." + field_info_list[0][0]
            key_get_type = field_info_list[0][1]
        elif len(self.key_list) == 1:
            put_data = TEMPLATE_DATA_PUT1 % self.key_list[1][0]
            key = "template." + self.key_list[1][0]
            key_get_type = field_info_list[1][1]
        else:
            #合成key。template.key1.toString().concat("_"+template.key2)
            length = len(self.key_list)
            if self.key_type == "list":
                key = "template." + self.key_list[1][0] + MULTI_KEY
            key_str = MULTI_KEY_PARAM2 * (length-1)
            key_str = key_str[:-1]    # 去掉最后一个"+"
            for k in self.key_list.keys()[1:]:
                key_str = key_str.replace("%s", self.key_list[k][0], 1)
            put_data = TEMPLATE_DATA_PUT2 % (self.key_list[1][0], key_str)
            key = key.replace("%s", key_str, 1)

        template_data_file.write(TEMPLATE_DATA_BEGIN % (template_name, key_get_type, template_name, key_get_type, template_name, template_name, template_name))

        if self.key_type == "list":
            put_data = TEMPLATE_DATA_PUT3 % (template_name, key, template_name, template_name, key)
        #-----------init()方法, element--------------
        for (fieldName, fieldType, fieldComment, field_function) in field_info_list:
            multi_string = ""
            # 需要分割的字符串
            if fieldType == "List<string>":
                multi_string = "multiStringToString"
            elif fieldType == "List<int>":
                multi_string = "multiStringToInt"
            elif fieldType == "List<float>":
                multi_string = "multiStringToNumber"

            # 转换字符串
            begin_conver = ""
            end_conver = ""
            if fieldType in g_type_conver:
                begin_conver = g_type_conver[fieldType][0] + "("
                end_conver = ")"

            if multi_string != "":
                str_code = "\t\t\ttemplate.%s = TemplateUtil.%s(element.%s\t%s\n" % (
                    fieldName, multi_string,
                    fieldName+");",
                    "// " + fieldComment)
            else: # 读取xml数据并转换成对应的类型
                str_code = '\t\t\ttemplate.%s = element[\"%s\"] != null ? %selement[\"%s\"].InnerText%s : %s;\t//%s\n' % (
                    fieldName, fieldName, begin_conver, fieldName, end_conver, g_type_default[fieldType][0], fieldComment)

            template_data_file.write(str_code.encode("utf-8"))
            #-------------Field.getFunction()方法---------------
            if field_function == "getField":
                self._generate_template_data_get_field(template_name, fieldName, fieldType, fieldComment)
            elif field_function == "getTemplate":
                self._generate_template_data_get_template(template_name, fieldName, fieldType)

        template_data_file.write(put_data + TEMPLATE_INIT_END)
        #-------------getData()方法---------------
        self._generate_template_data_get(template_name, template_data_file)
        #-------------getFieldData()方法---------------
        template_data_file.write(self.get_field_data.encode("utf-8"))

    # 构造单个模板数据文件
    def _generate_template_data_file(self, xml_dom, template_file, xml_file_name = "", code = ""):
        field_info_list = list()

        self._parse_field_info(xml_dom, field_info_list)
        self._generate_template_data(xml_dom, template_file, field_info_list)

        template_file.write(TEMPLATE_DATA_END)
        print "Generated ActionScript TemplateData %s." % xml_file_name

    #------------------------------------------------------------
    def _clear_data(self):
        self.key_list = dict()
        self.key_type = ""
        self.get_field_data = ""

    def generate_as3(self, output_path):
        """ 构造所有模板定义文件到多个ActionScript文件 """
        tplt_name = list()
        xml_list = ""
        function_list = ""
        for xml_dom in self.xml_dom_list:
            dom_node = xml_dom.childNodes[0]
            attrs = dom_node.attributes

            # 模板名字不能一样
            template_name = dom_node.nodeName
            if tplt_name.count(template_name) > 0:
                raise Exception("Repeated template name!")
            tplt_name.append(template_name)

            xml_file = self.dom_file_dict[xml_dom]
            if attrs.has_key("isClient") and attrs["isClient"].value == "0":
                print "skip %s" % xml_file
                continue

            if attrs.has_key("include"):
                self.import_file = attrs["include"].value
            else:
                self.import_file = ""
    
            if not os.path.exists(output_path):
                os.mkdir(output_path)
            is_new_file = True
            tplt_copy = ""
            tplt_data_path = os.path.join(output_path, "%sData.as" % template_name)
                
            #TemplateStruct
            self._clear_data()
            template_file = open(os.path.join(output_path, "%s.cs" % template_name), "w+")
            self._generate_template_struct_file(dom_node, template_file, xml_file)
            
            #TemplateData
            self._clear_data()
            self._generate_template_data_file(dom_node, template_file, xml_file, tplt_copy)
            
            #TemplateList
            xml_list += '\n\t\t"'+"%s.xml" % template_name+'",'
            function_list += '\n\t\t'+"%sData.Init," % template_name
        # TemplateList
        template_list_file = open(os.path.join(output_path, "TemplateList.cs"), "w+")
        template_list_file.write(TEMPLATE_LIST_BEGIN)
        template_list_file.write(TEMPLATE_LIST_BEGIN2)
        template_list_file.write(xml_list)
        template_list_file.write(TEMPLATE_LIST_END2)
        template_list_file.write(TEMPLATE_LIST_BEGIN3)
        template_list_file.write(function_list)
        template_list_file.write(TEMPLATE_LIST_END3)
        template_list_file.write(TEMPLATE_LIST_END)

def main():
    """
    converter = CSharpConverter()
    file_list = glob.glob(os.path.join("E:\MobaGame\Moba\Tools\Template\input", "*.xml"))
    for xml_file in file_list:
        converter.parser_xml(xml_file)
    output_path = "E:\MobaGame\Moba\Tools\Template\output"
    converter.generate_as3(output_path)
    return
    """

    arg_count = len(sys.argv)
    if 5 == arg_count:
        input_path = ""
        if "-i" == sys.argv[1]:
            input_path = sys.argv[2]
        if "" == input_path:
            return

        converter = CSharpConverter()
        file_list = glob.glob(os.path.join(input_path, "*.xml"))
        for xml_file in file_list:
            converter.parser_xml(xml_file)
        
        if "-o" == sys.argv[3]:
            output_path = sys.argv[4]
            converter.generate_as3(output_path)

if __name__ == "__main__":
    main()
